// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ETUDIANT
  PROFESSEUR
}

model Utilisateur {
  id              Int      @id @default(autoincrement())
  nom             String
  prenom          String
  email           String   @unique
  motDePasse      String
  role            Role
  reputationScore Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  transactions    Transactions[]
  validations     Validation[]
  documents       Document[]
  consultations   Consultation[]
  telechargements Telechargement[]

  @@map("utilisateurs")
}

model Transactions {
  id              Int      @id @default(autoincrement())
  typeOperation   String
  dateTransaction DateTime @default(now())
  hashTransaction String   @unique
  coutTransaction Float
  utilisateurId   Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Validation {
  id                      Int      @id @default(autoincrement())
  dateValidation          DateTime @default(now())
  hashValidation          String   @unique
  adresseValidateur       String
  sommeDenombreValidation String
  typeValidation          String
  utilisateurId           Int
  emprunterDocId          Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  utilisateur  Utilisateur   @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  emprunterDoc EmprunterDoc? @relation(fields: [emprunterDocId], references: [id])
  documents    Document[]

  @@map("validations")
}

model EmprunterDoc {
  id          Int       @id @default(autoincrement())
  dateEmprunt DateTime  @default(now())
  dateRetour  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  validations Validation[]

  @@map("emprunter_docs")
}

model Document {
  id                  Int      @id @default(autoincrement())
  titre               String
  auteur              String
  fichier             String
  dateDepot           DateTime @default(now())
  textMeta            String?  @db.Text
  hashDocument        String   @unique
  typeDocumentAccepte String
  tailleFichier       Int
  timestampCreation   DateTime @default(now())
  utilisateurId       Int
  validationId        Int?
  categorieId         Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  utilisateur     Utilisateur      @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  validation      Validation?      @relation(fields: [validationId], references: [id])
  categorie       Categorie        @relation(fields: [categorieId], references: [id])
  consultations   Consultation[]
  telechargements Telechargement[]

  @@map("documents")
}

model Categorie {
  id        Int      @id @default(autoincrement())
  libelle   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents Document[]

  @@map("categories")
}

model Telechargement {
  id                 Int      @id @default(autoincrement())
  dateTelechargement DateTime @default(now())
  utilisateurId      Int
  documentId         Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  document    Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("telechargements")
}

model Consultation {
  id               Int      @id @default(autoincrement())
  dateConsultation DateTime @default(now())
  utilisateurId    Int
  documentId       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  document    Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("consultations")
}
