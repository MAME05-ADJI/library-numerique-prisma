
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>
/**
 * Model Transactions
 * 
 */
export type Transactions = $Result.DefaultSelection<Prisma.$TransactionsPayload>
/**
 * Model Validation
 * 
 */
export type Validation = $Result.DefaultSelection<Prisma.$ValidationPayload>
/**
 * Model EmprunterDoc
 * 
 */
export type EmprunterDoc = $Result.DefaultSelection<Prisma.$EmprunterDocPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Categorie
 * 
 */
export type Categorie = $Result.DefaultSelection<Prisma.$CategoriePayload>
/**
 * Model Telechargement
 * 
 */
export type Telechargement = $Result.DefaultSelection<Prisma.$TelechargementPayload>
/**
 * Model Consultation
 * 
 */
export type Consultation = $Result.DefaultSelection<Prisma.$ConsultationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  ETUDIANT: 'ETUDIANT',
  PROFESSEUR: 'PROFESSEUR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilisateurs
 * const utilisateurs = await prisma.utilisateur.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilisateurs
   * const utilisateurs = await prisma.utilisateur.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **Transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.TransactionsDelegate<ExtArgs>;

  /**
   * `prisma.validation`: Exposes CRUD operations for the **Validation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Validations
    * const validations = await prisma.validation.findMany()
    * ```
    */
  get validation(): Prisma.ValidationDelegate<ExtArgs>;

  /**
   * `prisma.emprunterDoc`: Exposes CRUD operations for the **EmprunterDoc** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmprunterDocs
    * const emprunterDocs = await prisma.emprunterDoc.findMany()
    * ```
    */
  get emprunterDoc(): Prisma.EmprunterDocDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.categorie`: Exposes CRUD operations for the **Categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.CategorieDelegate<ExtArgs>;

  /**
   * `prisma.telechargement`: Exposes CRUD operations for the **Telechargement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Telechargements
    * const telechargements = await prisma.telechargement.findMany()
    * ```
    */
  get telechargement(): Prisma.TelechargementDelegate<ExtArgs>;

  /**
   * `prisma.consultation`: Exposes CRUD operations for the **Consultation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultations
    * const consultations = await prisma.consultation.findMany()
    * ```
    */
  get consultation(): Prisma.ConsultationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilisateur: 'Utilisateur',
    Transactions: 'Transactions',
    Validation: 'Validation',
    EmprunterDoc: 'EmprunterDoc',
    Document: 'Document',
    Categorie: 'Categorie',
    Telechargement: 'Telechargement',
    Consultation: 'Consultation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "utilisateur" | "transactions" | "validation" | "emprunterDoc" | "document" | "categorie" | "telechargement" | "consultation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
      Transactions: {
        payload: Prisma.$TransactionsPayload<ExtArgs>
        fields: Prisma.TransactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          findFirst: {
            args: Prisma.TransactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          findMany: {
            args: Prisma.TransactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>[]
          }
          create: {
            args: Prisma.TransactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          createMany: {
            args: Prisma.TransactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          update: {
            args: Prisma.TransactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          deleteMany: {
            args: Prisma.TransactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.TransactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      Validation: {
        payload: Prisma.$ValidationPayload<ExtArgs>
        fields: Prisma.ValidationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          findFirst: {
            args: Prisma.ValidationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          findMany: {
            args: Prisma.ValidationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>[]
          }
          create: {
            args: Prisma.ValidationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          createMany: {
            args: Prisma.ValidationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ValidationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          update: {
            args: Prisma.ValidationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          deleteMany: {
            args: Prisma.ValidationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ValidationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          aggregate: {
            args: Prisma.ValidationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidation>
          }
          groupBy: {
            args: Prisma.ValidationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationCountAggregateOutputType> | number
          }
        }
      }
      EmprunterDoc: {
        payload: Prisma.$EmprunterDocPayload<ExtArgs>
        fields: Prisma.EmprunterDocFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmprunterDocFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmprunterDocFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          findFirst: {
            args: Prisma.EmprunterDocFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmprunterDocFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          findMany: {
            args: Prisma.EmprunterDocFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>[]
          }
          create: {
            args: Prisma.EmprunterDocCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          createMany: {
            args: Prisma.EmprunterDocCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmprunterDocDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          update: {
            args: Prisma.EmprunterDocUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          deleteMany: {
            args: Prisma.EmprunterDocDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmprunterDocUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmprunterDocUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmprunterDocPayload>
          }
          aggregate: {
            args: Prisma.EmprunterDocAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmprunterDoc>
          }
          groupBy: {
            args: Prisma.EmprunterDocGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmprunterDocGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmprunterDocCountArgs<ExtArgs>
            result: $Utils.Optional<EmprunterDocCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Categorie: {
        payload: Prisma.$CategoriePayload<ExtArgs>
        fields: Prisma.CategorieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategorieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategorieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findFirst: {
            args: Prisma.CategorieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategorieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findMany: {
            args: Prisma.CategorieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          create: {
            args: Prisma.CategorieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          createMany: {
            args: Prisma.CategorieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategorieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          update: {
            args: Prisma.CategorieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          deleteMany: {
            args: Prisma.CategorieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategorieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategorieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          aggregate: {
            args: Prisma.CategorieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorie>
          }
          groupBy: {
            args: Prisma.CategorieGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategorieGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategorieCountArgs<ExtArgs>
            result: $Utils.Optional<CategorieCountAggregateOutputType> | number
          }
        }
      }
      Telechargement: {
        payload: Prisma.$TelechargementPayload<ExtArgs>
        fields: Prisma.TelechargementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TelechargementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TelechargementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          findFirst: {
            args: Prisma.TelechargementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TelechargementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          findMany: {
            args: Prisma.TelechargementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>[]
          }
          create: {
            args: Prisma.TelechargementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          createMany: {
            args: Prisma.TelechargementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TelechargementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          update: {
            args: Prisma.TelechargementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          deleteMany: {
            args: Prisma.TelechargementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TelechargementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TelechargementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          aggregate: {
            args: Prisma.TelechargementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTelechargement>
          }
          groupBy: {
            args: Prisma.TelechargementGroupByArgs<ExtArgs>
            result: $Utils.Optional<TelechargementGroupByOutputType>[]
          }
          count: {
            args: Prisma.TelechargementCountArgs<ExtArgs>
            result: $Utils.Optional<TelechargementCountAggregateOutputType> | number
          }
        }
      }
      Consultation: {
        payload: Prisma.$ConsultationPayload<ExtArgs>
        fields: Prisma.ConsultationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          findFirst: {
            args: Prisma.ConsultationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          findMany: {
            args: Prisma.ConsultationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>[]
          }
          create: {
            args: Prisma.ConsultationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          createMany: {
            args: Prisma.ConsultationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConsultationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          update: {
            args: Prisma.ConsultationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          deleteMany: {
            args: Prisma.ConsultationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsultationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationPayload>
          }
          aggregate: {
            args: Prisma.ConsultationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultation>
          }
          groupBy: {
            args: Prisma.ConsultationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultationCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilisateurCountOutputType
   */

  export type UtilisateurCountOutputType = {
    transactions: number
    validations: number
    documents: number
    consultations: number
    telechargements: number
  }

  export type UtilisateurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | UtilisateurCountOutputTypeCountTransactionsArgs
    validations?: boolean | UtilisateurCountOutputTypeCountValidationsArgs
    documents?: boolean | UtilisateurCountOutputTypeCountDocumentsArgs
    consultations?: boolean | UtilisateurCountOutputTypeCountConsultationsArgs
    telechargements?: boolean | UtilisateurCountOutputTypeCountTelechargementsArgs
  }

  // Custom InputTypes
  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilisateurCountOutputType
     */
    select?: UtilisateurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountTelechargementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
  }


  /**
   * Count Type ValidationCountOutputType
   */

  export type ValidationCountOutputType = {
    documents: number
  }

  export type ValidationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | ValidationCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * ValidationCountOutputType without action
   */
  export type ValidationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationCountOutputType
     */
    select?: ValidationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ValidationCountOutputType without action
   */
  export type ValidationCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type EmprunterDocCountOutputType
   */

  export type EmprunterDocCountOutputType = {
    validations: number
  }

  export type EmprunterDocCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validations?: boolean | EmprunterDocCountOutputTypeCountValidationsArgs
  }

  // Custom InputTypes
  /**
   * EmprunterDocCountOutputType without action
   */
  export type EmprunterDocCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDocCountOutputType
     */
    select?: EmprunterDocCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmprunterDocCountOutputType without action
   */
  export type EmprunterDocCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    consultations: number
    telechargements: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | DocumentCountOutputTypeCountConsultationsArgs
    telechargements?: boolean | DocumentCountOutputTypeCountTelechargementsArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountTelechargementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
  }


  /**
   * Count Type CategorieCountOutputType
   */

  export type CategorieCountOutputType = {
    documents: number
  }

  export type CategorieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | CategorieCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     */
    select?: CategorieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    id: number | null
    reputationScore: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    id: number | null
    reputationScore: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    motDePasse: string | null
    role: $Enums.Role | null
    reputationScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    motDePasse: string | null
    role: $Enums.Role | null
    reputationScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UtilisateurCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    motDePasse: number
    role: number
    reputationScore: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    id?: true
    reputationScore?: true
  }

  export type UtilisateurSumAggregateInputType = {
    id?: true
    reputationScore?: true
  }

  export type UtilisateurMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    motDePasse?: true
    role?: true
    reputationScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    motDePasse?: true
    role?: true
    reputationScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UtilisateurCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    motDePasse?: true
    role?: true
    reputationScore?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore: number
    createdAt: Date
    updatedAt: Date
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    motDePasse?: boolean
    role?: boolean
    reputationScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactions?: boolean | Utilisateur$transactionsArgs<ExtArgs>
    validations?: boolean | Utilisateur$validationsArgs<ExtArgs>
    documents?: boolean | Utilisateur$documentsArgs<ExtArgs>
    consultations?: boolean | Utilisateur$consultationsArgs<ExtArgs>
    telechargements?: boolean | Utilisateur$telechargementsArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>


  export type UtilisateurSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    motDePasse?: boolean
    role?: boolean
    reputationScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | Utilisateur$transactionsArgs<ExtArgs>
    validations?: boolean | Utilisateur$validationsArgs<ExtArgs>
    documents?: boolean | Utilisateur$documentsArgs<ExtArgs>
    consultations?: boolean | Utilisateur$consultationsArgs<ExtArgs>
    telechargements?: boolean | Utilisateur$telechargementsArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {
      transactions: Prisma.$TransactionsPayload<ExtArgs>[]
      validations: Prisma.$ValidationPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      consultations: Prisma.$ConsultationPayload<ExtArgs>[]
      telechargements: Prisma.$TelechargementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      email: string
      motDePasse: string
      role: $Enums.Role
      reputationScore: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends Utilisateur$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany"> | Null>
    validations<T extends Utilisateur$validationsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Utilisateur$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    consultations<T extends Utilisateur$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany"> | Null>
    telechargements<T extends Utilisateur$telechargementsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$telechargementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly id: FieldRef<"Utilisateur", 'Int'>
    readonly nom: FieldRef<"Utilisateur", 'String'>
    readonly prenom: FieldRef<"Utilisateur", 'String'>
    readonly email: FieldRef<"Utilisateur", 'String'>
    readonly motDePasse: FieldRef<"Utilisateur", 'String'>
    readonly role: FieldRef<"Utilisateur", 'Role'>
    readonly reputationScore: FieldRef<"Utilisateur", 'Int'>
    readonly createdAt: FieldRef<"Utilisateur", 'DateTime'>
    readonly updatedAt: FieldRef<"Utilisateur", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur.transactions
   */
  export type Utilisateur$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    cursor?: TransactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Utilisateur.validations
   */
  export type Utilisateur$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    cursor?: ValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Utilisateur.documents
   */
  export type Utilisateur$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Utilisateur.consultations
   */
  export type Utilisateur$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    cursor?: ConsultationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Utilisateur.telechargements
   */
  export type Utilisateur$telechargementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    cursor?: TelechargementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
  }


  /**
   * Model Transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    coutTransaction: number | null
    utilisateurId: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: number | null
    coutTransaction: number | null
    utilisateurId: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: number | null
    typeOperation: string | null
    dateTransaction: Date | null
    hashTransaction: string | null
    coutTransaction: number | null
    utilisateurId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: number | null
    typeOperation: string | null
    dateTransaction: Date | null
    hashTransaction: string | null
    coutTransaction: number | null
    utilisateurId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    typeOperation: number
    dateTransaction: number
    hashTransaction: number
    coutTransaction: number
    utilisateurId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    coutTransaction?: true
    utilisateurId?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    coutTransaction?: true
    utilisateurId?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    typeOperation?: true
    dateTransaction?: true
    hashTransaction?: true
    coutTransaction?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    typeOperation?: true
    dateTransaction?: true
    hashTransaction?: true
    coutTransaction?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    typeOperation?: true
    dateTransaction?: true
    hashTransaction?: true
    coutTransaction?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to aggregate.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type TransactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithAggregationInput | TransactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: TransactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: number
    typeOperation: string
    dateTransaction: Date
    hashTransaction: string
    coutTransaction: number
    utilisateurId: number
    createdAt: Date
    updatedAt: Date
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends TransactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type TransactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeOperation?: boolean
    dateTransaction?: boolean
    hashTransaction?: boolean
    coutTransaction?: boolean
    utilisateurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>


  export type TransactionsSelectScalar = {
    id?: boolean
    typeOperation?: boolean
    dateTransaction?: boolean
    hashTransaction?: boolean
    coutTransaction?: boolean
    utilisateurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }

  export type $TransactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transactions"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      typeOperation: string
      dateTransaction: Date
      hashTransaction: string
      coutTransaction: number
      utilisateurId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type TransactionsGetPayload<S extends boolean | null | undefined | TransactionsDefaultArgs> = $Result.GetResult<Prisma.$TransactionsPayload, S>

  type TransactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface TransactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transactions'], meta: { name: 'Transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {TransactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionsFindUniqueArgs>(args: SelectSubset<T, TransactionsFindUniqueArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionsFindFirstArgs>(args?: SelectSubset<T, TransactionsFindFirstArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionsFindManyArgs>(args?: SelectSubset<T, TransactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transactions.
     * @param {TransactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends TransactionsCreateArgs>(args: SelectSubset<T, TransactionsCreateArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionsCreateManyArgs>(args?: SelectSubset<T, TransactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transactions.
     * @param {TransactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends TransactionsDeleteArgs>(args: SelectSubset<T, TransactionsDeleteArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transactions.
     * @param {TransactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionsUpdateArgs>(args: SelectSubset<T, TransactionsUpdateArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionsDeleteManyArgs>(args?: SelectSubset<T, TransactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionsUpdateManyArgs>(args: SelectSubset<T, TransactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transactions.
     * @param {TransactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends TransactionsUpsertArgs>(args: SelectSubset<T, TransactionsUpsertArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionsCountArgs>(
      args?: Subset<T, TransactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionsGroupByArgs['orderBy'] }
        : { orderBy?: TransactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transactions model
   */
  readonly fields: TransactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transactions model
   */ 
  interface TransactionsFieldRefs {
    readonly id: FieldRef<"Transactions", 'Int'>
    readonly typeOperation: FieldRef<"Transactions", 'String'>
    readonly dateTransaction: FieldRef<"Transactions", 'DateTime'>
    readonly hashTransaction: FieldRef<"Transactions", 'String'>
    readonly coutTransaction: FieldRef<"Transactions", 'Float'>
    readonly utilisateurId: FieldRef<"Transactions", 'Int'>
    readonly createdAt: FieldRef<"Transactions", 'DateTime'>
    readonly updatedAt: FieldRef<"Transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transactions findUnique
   */
  export type TransactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions findUniqueOrThrow
   */
  export type TransactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions findFirst
   */
  export type TransactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions findFirstOrThrow
   */
  export type TransactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions findMany
   */
  export type TransactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions create
   */
  export type TransactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Transactions.
     */
    data: XOR<TransactionsCreateInput, TransactionsUncheckedCreateInput>
  }

  /**
   * Transactions createMany
   */
  export type TransactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionsCreateManyInput | TransactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transactions update
   */
  export type TransactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Transactions.
     */
    data: XOR<TransactionsUpdateInput, TransactionsUncheckedUpdateInput>
    /**
     * Choose, which Transactions to update.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions updateMany
   */
  export type TransactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionsWhereInput
  }

  /**
   * Transactions upsert
   */
  export type TransactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Transactions to update in case it exists.
     */
    where: TransactionsWhereUniqueInput
    /**
     * In case the Transactions found by the `where` argument doesn't exist, create a new Transactions with this data.
     */
    create: XOR<TransactionsCreateInput, TransactionsUncheckedCreateInput>
    /**
     * In case the Transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionsUpdateInput, TransactionsUncheckedUpdateInput>
  }

  /**
   * Transactions delete
   */
  export type TransactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter which Transactions to delete.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions deleteMany
   */
  export type TransactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionsWhereInput
  }

  /**
   * Transactions without action
   */
  export type TransactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
  }


  /**
   * Model Validation
   */

  export type AggregateValidation = {
    _count: ValidationCountAggregateOutputType | null
    _avg: ValidationAvgAggregateOutputType | null
    _sum: ValidationSumAggregateOutputType | null
    _min: ValidationMinAggregateOutputType | null
    _max: ValidationMaxAggregateOutputType | null
  }

  export type ValidationAvgAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    emprunterDocId: number | null
  }

  export type ValidationSumAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    emprunterDocId: number | null
  }

  export type ValidationMinAggregateOutputType = {
    id: number | null
    dateValidation: Date | null
    hashValidation: string | null
    adresseValidateur: string | null
    sommeDenombreValidation: string | null
    typeValidation: string | null
    utilisateurId: number | null
    emprunterDocId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValidationMaxAggregateOutputType = {
    id: number | null
    dateValidation: Date | null
    hashValidation: string | null
    adresseValidateur: string | null
    sommeDenombreValidation: string | null
    typeValidation: string | null
    utilisateurId: number | null
    emprunterDocId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValidationCountAggregateOutputType = {
    id: number
    dateValidation: number
    hashValidation: number
    adresseValidateur: number
    sommeDenombreValidation: number
    typeValidation: number
    utilisateurId: number
    emprunterDocId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ValidationAvgAggregateInputType = {
    id?: true
    utilisateurId?: true
    emprunterDocId?: true
  }

  export type ValidationSumAggregateInputType = {
    id?: true
    utilisateurId?: true
    emprunterDocId?: true
  }

  export type ValidationMinAggregateInputType = {
    id?: true
    dateValidation?: true
    hashValidation?: true
    adresseValidateur?: true
    sommeDenombreValidation?: true
    typeValidation?: true
    utilisateurId?: true
    emprunterDocId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValidationMaxAggregateInputType = {
    id?: true
    dateValidation?: true
    hashValidation?: true
    adresseValidateur?: true
    sommeDenombreValidation?: true
    typeValidation?: true
    utilisateurId?: true
    emprunterDocId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValidationCountAggregateInputType = {
    id?: true
    dateValidation?: true
    hashValidation?: true
    adresseValidateur?: true
    sommeDenombreValidation?: true
    typeValidation?: true
    utilisateurId?: true
    emprunterDocId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ValidationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Validation to aggregate.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Validations
    **/
    _count?: true | ValidationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValidationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValidationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationMaxAggregateInputType
  }

  export type GetValidationAggregateType<T extends ValidationAggregateArgs> = {
        [P in keyof T & keyof AggregateValidation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidation[P]>
      : GetScalarType<T[P], AggregateValidation[P]>
  }




  export type ValidationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithAggregationInput | ValidationOrderByWithAggregationInput[]
    by: ValidationScalarFieldEnum[] | ValidationScalarFieldEnum
    having?: ValidationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationCountAggregateInputType | true
    _avg?: ValidationAvgAggregateInputType
    _sum?: ValidationSumAggregateInputType
    _min?: ValidationMinAggregateInputType
    _max?: ValidationMaxAggregateInputType
  }

  export type ValidationGroupByOutputType = {
    id: number
    dateValidation: Date
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    emprunterDocId: number | null
    createdAt: Date
    updatedAt: Date
    _count: ValidationCountAggregateOutputType | null
    _avg: ValidationAvgAggregateOutputType | null
    _sum: ValidationSumAggregateOutputType | null
    _min: ValidationMinAggregateOutputType | null
    _max: ValidationMaxAggregateOutputType | null
  }

  type GetValidationGroupByPayload<T extends ValidationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationGroupByOutputType[P]>
        }
      >
    >


  export type ValidationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateValidation?: boolean
    hashValidation?: boolean
    adresseValidateur?: boolean
    sommeDenombreValidation?: boolean
    typeValidation?: boolean
    utilisateurId?: boolean
    emprunterDocId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    emprunterDoc?: boolean | Validation$emprunterDocArgs<ExtArgs>
    documents?: boolean | Validation$documentsArgs<ExtArgs>
    _count?: boolean | ValidationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validation"]>


  export type ValidationSelectScalar = {
    id?: boolean
    dateValidation?: boolean
    hashValidation?: boolean
    adresseValidateur?: boolean
    sommeDenombreValidation?: boolean
    typeValidation?: boolean
    utilisateurId?: boolean
    emprunterDocId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ValidationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    emprunterDoc?: boolean | Validation$emprunterDocArgs<ExtArgs>
    documents?: boolean | Validation$documentsArgs<ExtArgs>
    _count?: boolean | ValidationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ValidationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Validation"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      emprunterDoc: Prisma.$EmprunterDocPayload<ExtArgs> | null
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateValidation: Date
      hashValidation: string
      adresseValidateur: string
      sommeDenombreValidation: string
      typeValidation: string
      utilisateurId: number
      emprunterDocId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["validation"]>
    composites: {}
  }

  type ValidationGetPayload<S extends boolean | null | undefined | ValidationDefaultArgs> = $Result.GetResult<Prisma.$ValidationPayload, S>

  type ValidationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValidationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ValidationCountAggregateInputType | true
    }

  export interface ValidationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Validation'], meta: { name: 'Validation' } }
    /**
     * Find zero or one Validation that matches the filter.
     * @param {ValidationFindUniqueArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationFindUniqueArgs>(args: SelectSubset<T, ValidationFindUniqueArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Validation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ValidationFindUniqueOrThrowArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Validation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindFirstArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationFindFirstArgs>(args?: SelectSubset<T, ValidationFindFirstArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Validation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindFirstOrThrowArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Validations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Validations
     * const validations = await prisma.validation.findMany()
     * 
     * // Get first 10 Validations
     * const validations = await prisma.validation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationWithIdOnly = await prisma.validation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationFindManyArgs>(args?: SelectSubset<T, ValidationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Validation.
     * @param {ValidationCreateArgs} args - Arguments to create a Validation.
     * @example
     * // Create one Validation
     * const Validation = await prisma.validation.create({
     *   data: {
     *     // ... data to create a Validation
     *   }
     * })
     * 
     */
    create<T extends ValidationCreateArgs>(args: SelectSubset<T, ValidationCreateArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Validations.
     * @param {ValidationCreateManyArgs} args - Arguments to create many Validations.
     * @example
     * // Create many Validations
     * const validation = await prisma.validation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationCreateManyArgs>(args?: SelectSubset<T, ValidationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Validation.
     * @param {ValidationDeleteArgs} args - Arguments to delete one Validation.
     * @example
     * // Delete one Validation
     * const Validation = await prisma.validation.delete({
     *   where: {
     *     // ... filter to delete one Validation
     *   }
     * })
     * 
     */
    delete<T extends ValidationDeleteArgs>(args: SelectSubset<T, ValidationDeleteArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Validation.
     * @param {ValidationUpdateArgs} args - Arguments to update one Validation.
     * @example
     * // Update one Validation
     * const validation = await prisma.validation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationUpdateArgs>(args: SelectSubset<T, ValidationUpdateArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Validations.
     * @param {ValidationDeleteManyArgs} args - Arguments to filter Validations to delete.
     * @example
     * // Delete a few Validations
     * const { count } = await prisma.validation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationDeleteManyArgs>(args?: SelectSubset<T, ValidationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Validations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Validations
     * const validation = await prisma.validation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationUpdateManyArgs>(args: SelectSubset<T, ValidationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Validation.
     * @param {ValidationUpsertArgs} args - Arguments to update or create a Validation.
     * @example
     * // Update or create a Validation
     * const validation = await prisma.validation.upsert({
     *   create: {
     *     // ... data to create a Validation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Validation we want to update
     *   }
     * })
     */
    upsert<T extends ValidationUpsertArgs>(args: SelectSubset<T, ValidationUpsertArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Validations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationCountArgs} args - Arguments to filter Validations to count.
     * @example
     * // Count the number of Validations
     * const count = await prisma.validation.count({
     *   where: {
     *     // ... the filter for the Validations we want to count
     *   }
     * })
    **/
    count<T extends ValidationCountArgs>(
      args?: Subset<T, ValidationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Validation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationAggregateArgs>(args: Subset<T, ValidationAggregateArgs>): Prisma.PrismaPromise<GetValidationAggregateType<T>>

    /**
     * Group by Validation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationGroupByArgs['orderBy'] }
        : { orderBy?: ValidationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Validation model
   */
  readonly fields: ValidationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Validation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    emprunterDoc<T extends Validation$emprunterDocArgs<ExtArgs> = {}>(args?: Subset<T, Validation$emprunterDocArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    documents<T extends Validation$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Validation$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Validation model
   */ 
  interface ValidationFieldRefs {
    readonly id: FieldRef<"Validation", 'Int'>
    readonly dateValidation: FieldRef<"Validation", 'DateTime'>
    readonly hashValidation: FieldRef<"Validation", 'String'>
    readonly adresseValidateur: FieldRef<"Validation", 'String'>
    readonly sommeDenombreValidation: FieldRef<"Validation", 'String'>
    readonly typeValidation: FieldRef<"Validation", 'String'>
    readonly utilisateurId: FieldRef<"Validation", 'Int'>
    readonly emprunterDocId: FieldRef<"Validation", 'Int'>
    readonly createdAt: FieldRef<"Validation", 'DateTime'>
    readonly updatedAt: FieldRef<"Validation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Validation findUnique
   */
  export type ValidationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation findUniqueOrThrow
   */
  export type ValidationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation findFirst
   */
  export type ValidationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Validations.
     */
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation findFirstOrThrow
   */
  export type ValidationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Validations.
     */
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation findMany
   */
  export type ValidationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validations to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation create
   */
  export type ValidationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The data needed to create a Validation.
     */
    data: XOR<ValidationCreateInput, ValidationUncheckedCreateInput>
  }

  /**
   * Validation createMany
   */
  export type ValidationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Validations.
     */
    data: ValidationCreateManyInput | ValidationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Validation update
   */
  export type ValidationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The data needed to update a Validation.
     */
    data: XOR<ValidationUpdateInput, ValidationUncheckedUpdateInput>
    /**
     * Choose, which Validation to update.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation updateMany
   */
  export type ValidationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Validations.
     */
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyInput>
    /**
     * Filter which Validations to update
     */
    where?: ValidationWhereInput
  }

  /**
   * Validation upsert
   */
  export type ValidationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The filter to search for the Validation to update in case it exists.
     */
    where: ValidationWhereUniqueInput
    /**
     * In case the Validation found by the `where` argument doesn't exist, create a new Validation with this data.
     */
    create: XOR<ValidationCreateInput, ValidationUncheckedCreateInput>
    /**
     * In case the Validation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationUpdateInput, ValidationUncheckedUpdateInput>
  }

  /**
   * Validation delete
   */
  export type ValidationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter which Validation to delete.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation deleteMany
   */
  export type ValidationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Validations to delete
     */
    where?: ValidationWhereInput
  }

  /**
   * Validation.emprunterDoc
   */
  export type Validation$emprunterDocArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    where?: EmprunterDocWhereInput
  }

  /**
   * Validation.documents
   */
  export type Validation$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Validation without action
   */
  export type ValidationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
  }


  /**
   * Model EmprunterDoc
   */

  export type AggregateEmprunterDoc = {
    _count: EmprunterDocCountAggregateOutputType | null
    _avg: EmprunterDocAvgAggregateOutputType | null
    _sum: EmprunterDocSumAggregateOutputType | null
    _min: EmprunterDocMinAggregateOutputType | null
    _max: EmprunterDocMaxAggregateOutputType | null
  }

  export type EmprunterDocAvgAggregateOutputType = {
    id: number | null
  }

  export type EmprunterDocSumAggregateOutputType = {
    id: number | null
  }

  export type EmprunterDocMinAggregateOutputType = {
    id: number | null
    dateEmprunt: Date | null
    dateRetour: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmprunterDocMaxAggregateOutputType = {
    id: number | null
    dateEmprunt: Date | null
    dateRetour: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmprunterDocCountAggregateOutputType = {
    id: number
    dateEmprunt: number
    dateRetour: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmprunterDocAvgAggregateInputType = {
    id?: true
  }

  export type EmprunterDocSumAggregateInputType = {
    id?: true
  }

  export type EmprunterDocMinAggregateInputType = {
    id?: true
    dateEmprunt?: true
    dateRetour?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmprunterDocMaxAggregateInputType = {
    id?: true
    dateEmprunt?: true
    dateRetour?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmprunterDocCountAggregateInputType = {
    id?: true
    dateEmprunt?: true
    dateRetour?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmprunterDocAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmprunterDoc to aggregate.
     */
    where?: EmprunterDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprunterDocs to fetch.
     */
    orderBy?: EmprunterDocOrderByWithRelationInput | EmprunterDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmprunterDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprunterDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprunterDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmprunterDocs
    **/
    _count?: true | EmprunterDocCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmprunterDocAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmprunterDocSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmprunterDocMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmprunterDocMaxAggregateInputType
  }

  export type GetEmprunterDocAggregateType<T extends EmprunterDocAggregateArgs> = {
        [P in keyof T & keyof AggregateEmprunterDoc]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmprunterDoc[P]>
      : GetScalarType<T[P], AggregateEmprunterDoc[P]>
  }




  export type EmprunterDocGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmprunterDocWhereInput
    orderBy?: EmprunterDocOrderByWithAggregationInput | EmprunterDocOrderByWithAggregationInput[]
    by: EmprunterDocScalarFieldEnum[] | EmprunterDocScalarFieldEnum
    having?: EmprunterDocScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmprunterDocCountAggregateInputType | true
    _avg?: EmprunterDocAvgAggregateInputType
    _sum?: EmprunterDocSumAggregateInputType
    _min?: EmprunterDocMinAggregateInputType
    _max?: EmprunterDocMaxAggregateInputType
  }

  export type EmprunterDocGroupByOutputType = {
    id: number
    dateEmprunt: Date
    dateRetour: Date | null
    createdAt: Date
    updatedAt: Date
    _count: EmprunterDocCountAggregateOutputType | null
    _avg: EmprunterDocAvgAggregateOutputType | null
    _sum: EmprunterDocSumAggregateOutputType | null
    _min: EmprunterDocMinAggregateOutputType | null
    _max: EmprunterDocMaxAggregateOutputType | null
  }

  type GetEmprunterDocGroupByPayload<T extends EmprunterDocGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmprunterDocGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmprunterDocGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmprunterDocGroupByOutputType[P]>
            : GetScalarType<T[P], EmprunterDocGroupByOutputType[P]>
        }
      >
    >


  export type EmprunterDocSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateEmprunt?: boolean
    dateRetour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validations?: boolean | EmprunterDoc$validationsArgs<ExtArgs>
    _count?: boolean | EmprunterDocCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emprunterDoc"]>


  export type EmprunterDocSelectScalar = {
    id?: boolean
    dateEmprunt?: boolean
    dateRetour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmprunterDocInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validations?: boolean | EmprunterDoc$validationsArgs<ExtArgs>
    _count?: boolean | EmprunterDocCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmprunterDocPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmprunterDoc"
    objects: {
      validations: Prisma.$ValidationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateEmprunt: Date
      dateRetour: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emprunterDoc"]>
    composites: {}
  }

  type EmprunterDocGetPayload<S extends boolean | null | undefined | EmprunterDocDefaultArgs> = $Result.GetResult<Prisma.$EmprunterDocPayload, S>

  type EmprunterDocCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmprunterDocFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmprunterDocCountAggregateInputType | true
    }

  export interface EmprunterDocDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmprunterDoc'], meta: { name: 'EmprunterDoc' } }
    /**
     * Find zero or one EmprunterDoc that matches the filter.
     * @param {EmprunterDocFindUniqueArgs} args - Arguments to find a EmprunterDoc
     * @example
     * // Get one EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmprunterDocFindUniqueArgs>(args: SelectSubset<T, EmprunterDocFindUniqueArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmprunterDoc that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmprunterDocFindUniqueOrThrowArgs} args - Arguments to find a EmprunterDoc
     * @example
     * // Get one EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmprunterDocFindUniqueOrThrowArgs>(args: SelectSubset<T, EmprunterDocFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmprunterDoc that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocFindFirstArgs} args - Arguments to find a EmprunterDoc
     * @example
     * // Get one EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmprunterDocFindFirstArgs>(args?: SelectSubset<T, EmprunterDocFindFirstArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmprunterDoc that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocFindFirstOrThrowArgs} args - Arguments to find a EmprunterDoc
     * @example
     * // Get one EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmprunterDocFindFirstOrThrowArgs>(args?: SelectSubset<T, EmprunterDocFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmprunterDocs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmprunterDocs
     * const emprunterDocs = await prisma.emprunterDoc.findMany()
     * 
     * // Get first 10 EmprunterDocs
     * const emprunterDocs = await prisma.emprunterDoc.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emprunterDocWithIdOnly = await prisma.emprunterDoc.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmprunterDocFindManyArgs>(args?: SelectSubset<T, EmprunterDocFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmprunterDoc.
     * @param {EmprunterDocCreateArgs} args - Arguments to create a EmprunterDoc.
     * @example
     * // Create one EmprunterDoc
     * const EmprunterDoc = await prisma.emprunterDoc.create({
     *   data: {
     *     // ... data to create a EmprunterDoc
     *   }
     * })
     * 
     */
    create<T extends EmprunterDocCreateArgs>(args: SelectSubset<T, EmprunterDocCreateArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmprunterDocs.
     * @param {EmprunterDocCreateManyArgs} args - Arguments to create many EmprunterDocs.
     * @example
     * // Create many EmprunterDocs
     * const emprunterDoc = await prisma.emprunterDoc.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmprunterDocCreateManyArgs>(args?: SelectSubset<T, EmprunterDocCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmprunterDoc.
     * @param {EmprunterDocDeleteArgs} args - Arguments to delete one EmprunterDoc.
     * @example
     * // Delete one EmprunterDoc
     * const EmprunterDoc = await prisma.emprunterDoc.delete({
     *   where: {
     *     // ... filter to delete one EmprunterDoc
     *   }
     * })
     * 
     */
    delete<T extends EmprunterDocDeleteArgs>(args: SelectSubset<T, EmprunterDocDeleteArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmprunterDoc.
     * @param {EmprunterDocUpdateArgs} args - Arguments to update one EmprunterDoc.
     * @example
     * // Update one EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmprunterDocUpdateArgs>(args: SelectSubset<T, EmprunterDocUpdateArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmprunterDocs.
     * @param {EmprunterDocDeleteManyArgs} args - Arguments to filter EmprunterDocs to delete.
     * @example
     * // Delete a few EmprunterDocs
     * const { count } = await prisma.emprunterDoc.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmprunterDocDeleteManyArgs>(args?: SelectSubset<T, EmprunterDocDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmprunterDocs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmprunterDocs
     * const emprunterDoc = await prisma.emprunterDoc.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmprunterDocUpdateManyArgs>(args: SelectSubset<T, EmprunterDocUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmprunterDoc.
     * @param {EmprunterDocUpsertArgs} args - Arguments to update or create a EmprunterDoc.
     * @example
     * // Update or create a EmprunterDoc
     * const emprunterDoc = await prisma.emprunterDoc.upsert({
     *   create: {
     *     // ... data to create a EmprunterDoc
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmprunterDoc we want to update
     *   }
     * })
     */
    upsert<T extends EmprunterDocUpsertArgs>(args: SelectSubset<T, EmprunterDocUpsertArgs<ExtArgs>>): Prisma__EmprunterDocClient<$Result.GetResult<Prisma.$EmprunterDocPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmprunterDocs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocCountArgs} args - Arguments to filter EmprunterDocs to count.
     * @example
     * // Count the number of EmprunterDocs
     * const count = await prisma.emprunterDoc.count({
     *   where: {
     *     // ... the filter for the EmprunterDocs we want to count
     *   }
     * })
    **/
    count<T extends EmprunterDocCountArgs>(
      args?: Subset<T, EmprunterDocCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmprunterDocCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmprunterDoc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmprunterDocAggregateArgs>(args: Subset<T, EmprunterDocAggregateArgs>): Prisma.PrismaPromise<GetEmprunterDocAggregateType<T>>

    /**
     * Group by EmprunterDoc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmprunterDocGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmprunterDocGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmprunterDocGroupByArgs['orderBy'] }
        : { orderBy?: EmprunterDocGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmprunterDocGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmprunterDocGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmprunterDoc model
   */
  readonly fields: EmprunterDocFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmprunterDoc.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmprunterDocClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    validations<T extends EmprunterDoc$validationsArgs<ExtArgs> = {}>(args?: Subset<T, EmprunterDoc$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmprunterDoc model
   */ 
  interface EmprunterDocFieldRefs {
    readonly id: FieldRef<"EmprunterDoc", 'Int'>
    readonly dateEmprunt: FieldRef<"EmprunterDoc", 'DateTime'>
    readonly dateRetour: FieldRef<"EmprunterDoc", 'DateTime'>
    readonly createdAt: FieldRef<"EmprunterDoc", 'DateTime'>
    readonly updatedAt: FieldRef<"EmprunterDoc", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmprunterDoc findUnique
   */
  export type EmprunterDocFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter, which EmprunterDoc to fetch.
     */
    where: EmprunterDocWhereUniqueInput
  }

  /**
   * EmprunterDoc findUniqueOrThrow
   */
  export type EmprunterDocFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter, which EmprunterDoc to fetch.
     */
    where: EmprunterDocWhereUniqueInput
  }

  /**
   * EmprunterDoc findFirst
   */
  export type EmprunterDocFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter, which EmprunterDoc to fetch.
     */
    where?: EmprunterDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprunterDocs to fetch.
     */
    orderBy?: EmprunterDocOrderByWithRelationInput | EmprunterDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmprunterDocs.
     */
    cursor?: EmprunterDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprunterDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprunterDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmprunterDocs.
     */
    distinct?: EmprunterDocScalarFieldEnum | EmprunterDocScalarFieldEnum[]
  }

  /**
   * EmprunterDoc findFirstOrThrow
   */
  export type EmprunterDocFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter, which EmprunterDoc to fetch.
     */
    where?: EmprunterDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprunterDocs to fetch.
     */
    orderBy?: EmprunterDocOrderByWithRelationInput | EmprunterDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmprunterDocs.
     */
    cursor?: EmprunterDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprunterDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprunterDocs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmprunterDocs.
     */
    distinct?: EmprunterDocScalarFieldEnum | EmprunterDocScalarFieldEnum[]
  }

  /**
   * EmprunterDoc findMany
   */
  export type EmprunterDocFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter, which EmprunterDocs to fetch.
     */
    where?: EmprunterDocWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmprunterDocs to fetch.
     */
    orderBy?: EmprunterDocOrderByWithRelationInput | EmprunterDocOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmprunterDocs.
     */
    cursor?: EmprunterDocWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmprunterDocs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmprunterDocs.
     */
    skip?: number
    distinct?: EmprunterDocScalarFieldEnum | EmprunterDocScalarFieldEnum[]
  }

  /**
   * EmprunterDoc create
   */
  export type EmprunterDocCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * The data needed to create a EmprunterDoc.
     */
    data: XOR<EmprunterDocCreateInput, EmprunterDocUncheckedCreateInput>
  }

  /**
   * EmprunterDoc createMany
   */
  export type EmprunterDocCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmprunterDocs.
     */
    data: EmprunterDocCreateManyInput | EmprunterDocCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmprunterDoc update
   */
  export type EmprunterDocUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * The data needed to update a EmprunterDoc.
     */
    data: XOR<EmprunterDocUpdateInput, EmprunterDocUncheckedUpdateInput>
    /**
     * Choose, which EmprunterDoc to update.
     */
    where: EmprunterDocWhereUniqueInput
  }

  /**
   * EmprunterDoc updateMany
   */
  export type EmprunterDocUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmprunterDocs.
     */
    data: XOR<EmprunterDocUpdateManyMutationInput, EmprunterDocUncheckedUpdateManyInput>
    /**
     * Filter which EmprunterDocs to update
     */
    where?: EmprunterDocWhereInput
  }

  /**
   * EmprunterDoc upsert
   */
  export type EmprunterDocUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * The filter to search for the EmprunterDoc to update in case it exists.
     */
    where: EmprunterDocWhereUniqueInput
    /**
     * In case the EmprunterDoc found by the `where` argument doesn't exist, create a new EmprunterDoc with this data.
     */
    create: XOR<EmprunterDocCreateInput, EmprunterDocUncheckedCreateInput>
    /**
     * In case the EmprunterDoc was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmprunterDocUpdateInput, EmprunterDocUncheckedUpdateInput>
  }

  /**
   * EmprunterDoc delete
   */
  export type EmprunterDocDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
    /**
     * Filter which EmprunterDoc to delete.
     */
    where: EmprunterDocWhereUniqueInput
  }

  /**
   * EmprunterDoc deleteMany
   */
  export type EmprunterDocDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmprunterDocs to delete
     */
    where?: EmprunterDocWhereInput
  }

  /**
   * EmprunterDoc.validations
   */
  export type EmprunterDoc$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    cursor?: ValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * EmprunterDoc without action
   */
  export type EmprunterDocDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmprunterDoc
     */
    select?: EmprunterDocSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmprunterDocInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    tailleFichier: number | null
    utilisateurId: number | null
    validationId: number | null
    categorieId: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    tailleFichier: number | null
    utilisateurId: number | null
    validationId: number | null
    categorieId: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    titre: string | null
    auteur: string | null
    fichier: string | null
    dateDepot: Date | null
    textMeta: string | null
    hashDocument: string | null
    typeDocumentAccepte: string | null
    tailleFichier: number | null
    timestampCreation: Date | null
    utilisateurId: number | null
    validationId: number | null
    categorieId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    auteur: string | null
    fichier: string | null
    dateDepot: Date | null
    textMeta: string | null
    hashDocument: string | null
    typeDocumentAccepte: string | null
    tailleFichier: number | null
    timestampCreation: Date | null
    utilisateurId: number | null
    validationId: number | null
    categorieId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    titre: number
    auteur: number
    fichier: number
    dateDepot: number
    textMeta: number
    hashDocument: number
    typeDocumentAccepte: number
    tailleFichier: number
    timestampCreation: number
    utilisateurId: number
    validationId: number
    categorieId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    tailleFichier?: true
    utilisateurId?: true
    validationId?: true
    categorieId?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    tailleFichier?: true
    utilisateurId?: true
    validationId?: true
    categorieId?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    titre?: true
    auteur?: true
    fichier?: true
    dateDepot?: true
    textMeta?: true
    hashDocument?: true
    typeDocumentAccepte?: true
    tailleFichier?: true
    timestampCreation?: true
    utilisateurId?: true
    validationId?: true
    categorieId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    titre?: true
    auteur?: true
    fichier?: true
    dateDepot?: true
    textMeta?: true
    hashDocument?: true
    typeDocumentAccepte?: true
    tailleFichier?: true
    timestampCreation?: true
    utilisateurId?: true
    validationId?: true
    categorieId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    titre?: true
    auteur?: true
    fichier?: true
    dateDepot?: true
    textMeta?: true
    hashDocument?: true
    typeDocumentAccepte?: true
    tailleFichier?: true
    timestampCreation?: true
    utilisateurId?: true
    validationId?: true
    categorieId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: number
    titre: string
    auteur: string
    fichier: string
    dateDepot: Date
    textMeta: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation: Date
    utilisateurId: number
    validationId: number | null
    categorieId: number
    createdAt: Date
    updatedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    auteur?: boolean
    fichier?: boolean
    dateDepot?: boolean
    textMeta?: boolean
    hashDocument?: boolean
    typeDocumentAccepte?: boolean
    tailleFichier?: boolean
    timestampCreation?: boolean
    utilisateurId?: boolean
    validationId?: boolean
    categorieId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    validation?: boolean | Document$validationArgs<ExtArgs>
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    consultations?: boolean | Document$consultationsArgs<ExtArgs>
    telechargements?: boolean | Document$telechargementsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>


  export type DocumentSelectScalar = {
    id?: boolean
    titre?: boolean
    auteur?: boolean
    fichier?: boolean
    dateDepot?: boolean
    textMeta?: boolean
    hashDocument?: boolean
    typeDocumentAccepte?: boolean
    tailleFichier?: boolean
    timestampCreation?: boolean
    utilisateurId?: boolean
    validationId?: boolean
    categorieId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    validation?: boolean | Document$validationArgs<ExtArgs>
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    consultations?: boolean | Document$consultationsArgs<ExtArgs>
    telechargements?: boolean | Document$telechargementsArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      validation: Prisma.$ValidationPayload<ExtArgs> | null
      categorie: Prisma.$CategoriePayload<ExtArgs>
      consultations: Prisma.$ConsultationPayload<ExtArgs>[]
      telechargements: Prisma.$TelechargementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      auteur: string
      fichier: string
      dateDepot: Date
      textMeta: string | null
      hashDocument: string
      typeDocumentAccepte: string
      tailleFichier: number
      timestampCreation: Date
      utilisateurId: number
      validationId: number | null
      categorieId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    validation<T extends Document$validationArgs<ExtArgs> = {}>(args?: Subset<T, Document$validationArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    categorie<T extends CategorieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategorieDefaultArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    consultations<T extends Document$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Document$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany"> | Null>
    telechargements<T extends Document$telechargementsArgs<ExtArgs> = {}>(args?: Subset<T, Document$telechargementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'Int'>
    readonly titre: FieldRef<"Document", 'String'>
    readonly auteur: FieldRef<"Document", 'String'>
    readonly fichier: FieldRef<"Document", 'String'>
    readonly dateDepot: FieldRef<"Document", 'DateTime'>
    readonly textMeta: FieldRef<"Document", 'String'>
    readonly hashDocument: FieldRef<"Document", 'String'>
    readonly typeDocumentAccepte: FieldRef<"Document", 'String'>
    readonly tailleFichier: FieldRef<"Document", 'Int'>
    readonly timestampCreation: FieldRef<"Document", 'DateTime'>
    readonly utilisateurId: FieldRef<"Document", 'Int'>
    readonly validationId: FieldRef<"Document", 'Int'>
    readonly categorieId: FieldRef<"Document", 'Int'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.validation
   */
  export type Document$validationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
  }

  /**
   * Document.consultations
   */
  export type Document$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    cursor?: ConsultationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Document.telechargements
   */
  export type Document$telechargementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    cursor?: TelechargementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Categorie
   */

  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    libelle: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    libelle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    libelle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    libelle?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategorieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie to aggregate.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorieWhereInput
    orderBy?: CategorieOrderByWithAggregationInput | CategorieOrderByWithAggregationInput[]
    by: CategorieScalarFieldEnum[] | CategorieScalarFieldEnum
    having?: CategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }

  export type CategorieGroupByOutputType = {
    id: number
    libelle: string
    createdAt: Date
    updatedAt: Date
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type CategorieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documents?: boolean | Categorie$documentsArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorie"]>


  export type CategorieSelectScalar = {
    id?: boolean
    libelle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategorieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | Categorie$documentsArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorie"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["categorie"]>
    composites: {}
  }

  type CategorieGetPayload<S extends boolean | null | undefined | CategorieDefaultArgs> = $Result.GetResult<Prisma.$CategoriePayload, S>

  type CategorieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategorieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategorieCountAggregateInputType | true
    }

  export interface CategorieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorie'], meta: { name: 'Categorie' } }
    /**
     * Find zero or one Categorie that matches the filter.
     * @param {CategorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategorieFindUniqueArgs>(args: SelectSubset<T, CategorieFindUniqueArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categorie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategorieFindUniqueOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategorieFindUniqueOrThrowArgs>(args: SelectSubset<T, CategorieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategorieFindFirstArgs>(args?: SelectSubset<T, CategorieFindFirstArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categorie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategorieFindFirstOrThrowArgs>(args?: SelectSubset<T, CategorieFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategorieFindManyArgs>(args?: SelectSubset<T, CategorieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categorie.
     * @param {CategorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
     */
    create<T extends CategorieCreateArgs>(args: SelectSubset<T, CategorieCreateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategorieCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categorie = await prisma.categorie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategorieCreateManyArgs>(args?: SelectSubset<T, CategorieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorie.
     * @param {CategorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
     */
    delete<T extends CategorieDeleteArgs>(args: SelectSubset<T, CategorieDeleteArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categorie.
     * @param {CategorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategorieUpdateArgs>(args: SelectSubset<T, CategorieUpdateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategorieDeleteManyArgs>(args?: SelectSubset<T, CategorieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategorieUpdateManyArgs>(args: SelectSubset<T, CategorieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie.
     * @param {CategorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
     */
    upsert<T extends CategorieUpsertArgs>(args: SelectSubset<T, CategorieUpsertArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategorieCountArgs>(
      args?: Subset<T, CategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): Prisma.PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorie model
   */
  readonly fields: CategorieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategorieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends Categorie$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Categorie$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categorie model
   */ 
  interface CategorieFieldRefs {
    readonly id: FieldRef<"Categorie", 'Int'>
    readonly libelle: FieldRef<"Categorie", 'String'>
    readonly createdAt: FieldRef<"Categorie", 'DateTime'>
    readonly updatedAt: FieldRef<"Categorie", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Categorie findUnique
   */
  export type CategorieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findUniqueOrThrow
   */
  export type CategorieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findFirst
   */
  export type CategorieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findFirstOrThrow
   */
  export type CategorieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findMany
   */
  export type CategorieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie create
   */
  export type CategorieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorie.
     */
    data: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
  }

  /**
   * Categorie createMany
   */
  export type CategorieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorie update
   */
  export type CategorieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorie.
     */
    data: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
    /**
     * Choose, which Categorie to update.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie updateMany
   */
  export type CategorieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
  }

  /**
   * Categorie upsert
   */
  export type CategorieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorie to update in case it exists.
     */
    where: CategorieWhereUniqueInput
    /**
     * In case the Categorie found by the `where` argument doesn't exist, create a new Categorie with this data.
     */
    create: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
    /**
     * In case the Categorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
  }

  /**
   * Categorie delete
   */
  export type CategorieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter which Categorie to delete.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie deleteMany
   */
  export type CategorieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategorieWhereInput
  }

  /**
   * Categorie.documents
   */
  export type Categorie$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Categorie without action
   */
  export type CategorieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
  }


  /**
   * Model Telechargement
   */

  export type AggregateTelechargement = {
    _count: TelechargementCountAggregateOutputType | null
    _avg: TelechargementAvgAggregateOutputType | null
    _sum: TelechargementSumAggregateOutputType | null
    _min: TelechargementMinAggregateOutputType | null
    _max: TelechargementMaxAggregateOutputType | null
  }

  export type TelechargementAvgAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    documentId: number | null
  }

  export type TelechargementSumAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    documentId: number | null
  }

  export type TelechargementMinAggregateOutputType = {
    id: number | null
    dateTelechargement: Date | null
    utilisateurId: number | null
    documentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TelechargementMaxAggregateOutputType = {
    id: number | null
    dateTelechargement: Date | null
    utilisateurId: number | null
    documentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TelechargementCountAggregateOutputType = {
    id: number
    dateTelechargement: number
    utilisateurId: number
    documentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TelechargementAvgAggregateInputType = {
    id?: true
    utilisateurId?: true
    documentId?: true
  }

  export type TelechargementSumAggregateInputType = {
    id?: true
    utilisateurId?: true
    documentId?: true
  }

  export type TelechargementMinAggregateInputType = {
    id?: true
    dateTelechargement?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TelechargementMaxAggregateInputType = {
    id?: true
    dateTelechargement?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TelechargementCountAggregateInputType = {
    id?: true
    dateTelechargement?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TelechargementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telechargement to aggregate.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Telechargements
    **/
    _count?: true | TelechargementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TelechargementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TelechargementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TelechargementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TelechargementMaxAggregateInputType
  }

  export type GetTelechargementAggregateType<T extends TelechargementAggregateArgs> = {
        [P in keyof T & keyof AggregateTelechargement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelechargement[P]>
      : GetScalarType<T[P], AggregateTelechargement[P]>
  }




  export type TelechargementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithAggregationInput | TelechargementOrderByWithAggregationInput[]
    by: TelechargementScalarFieldEnum[] | TelechargementScalarFieldEnum
    having?: TelechargementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TelechargementCountAggregateInputType | true
    _avg?: TelechargementAvgAggregateInputType
    _sum?: TelechargementSumAggregateInputType
    _min?: TelechargementMinAggregateInputType
    _max?: TelechargementMaxAggregateInputType
  }

  export type TelechargementGroupByOutputType = {
    id: number
    dateTelechargement: Date
    utilisateurId: number
    documentId: number
    createdAt: Date
    updatedAt: Date
    _count: TelechargementCountAggregateOutputType | null
    _avg: TelechargementAvgAggregateOutputType | null
    _sum: TelechargementSumAggregateOutputType | null
    _min: TelechargementMinAggregateOutputType | null
    _max: TelechargementMaxAggregateOutputType | null
  }

  type GetTelechargementGroupByPayload<T extends TelechargementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelechargementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TelechargementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TelechargementGroupByOutputType[P]>
            : GetScalarType<T[P], TelechargementGroupByOutputType[P]>
        }
      >
    >


  export type TelechargementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateTelechargement?: boolean
    utilisateurId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telechargement"]>


  export type TelechargementSelectScalar = {
    id?: boolean
    dateTelechargement?: boolean
    utilisateurId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TelechargementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }

  export type $TelechargementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Telechargement"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      document: Prisma.$DocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateTelechargement: Date
      utilisateurId: number
      documentId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["telechargement"]>
    composites: {}
  }

  type TelechargementGetPayload<S extends boolean | null | undefined | TelechargementDefaultArgs> = $Result.GetResult<Prisma.$TelechargementPayload, S>

  type TelechargementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TelechargementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TelechargementCountAggregateInputType | true
    }

  export interface TelechargementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Telechargement'], meta: { name: 'Telechargement' } }
    /**
     * Find zero or one Telechargement that matches the filter.
     * @param {TelechargementFindUniqueArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TelechargementFindUniqueArgs>(args: SelectSubset<T, TelechargementFindUniqueArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Telechargement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TelechargementFindUniqueOrThrowArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TelechargementFindUniqueOrThrowArgs>(args: SelectSubset<T, TelechargementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Telechargement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindFirstArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TelechargementFindFirstArgs>(args?: SelectSubset<T, TelechargementFindFirstArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Telechargement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindFirstOrThrowArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TelechargementFindFirstOrThrowArgs>(args?: SelectSubset<T, TelechargementFindFirstOrThrowArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Telechargements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Telechargements
     * const telechargements = await prisma.telechargement.findMany()
     * 
     * // Get first 10 Telechargements
     * const telechargements = await prisma.telechargement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const telechargementWithIdOnly = await prisma.telechargement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TelechargementFindManyArgs>(args?: SelectSubset<T, TelechargementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Telechargement.
     * @param {TelechargementCreateArgs} args - Arguments to create a Telechargement.
     * @example
     * // Create one Telechargement
     * const Telechargement = await prisma.telechargement.create({
     *   data: {
     *     // ... data to create a Telechargement
     *   }
     * })
     * 
     */
    create<T extends TelechargementCreateArgs>(args: SelectSubset<T, TelechargementCreateArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Telechargements.
     * @param {TelechargementCreateManyArgs} args - Arguments to create many Telechargements.
     * @example
     * // Create many Telechargements
     * const telechargement = await prisma.telechargement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TelechargementCreateManyArgs>(args?: SelectSubset<T, TelechargementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Telechargement.
     * @param {TelechargementDeleteArgs} args - Arguments to delete one Telechargement.
     * @example
     * // Delete one Telechargement
     * const Telechargement = await prisma.telechargement.delete({
     *   where: {
     *     // ... filter to delete one Telechargement
     *   }
     * })
     * 
     */
    delete<T extends TelechargementDeleteArgs>(args: SelectSubset<T, TelechargementDeleteArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Telechargement.
     * @param {TelechargementUpdateArgs} args - Arguments to update one Telechargement.
     * @example
     * // Update one Telechargement
     * const telechargement = await prisma.telechargement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TelechargementUpdateArgs>(args: SelectSubset<T, TelechargementUpdateArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Telechargements.
     * @param {TelechargementDeleteManyArgs} args - Arguments to filter Telechargements to delete.
     * @example
     * // Delete a few Telechargements
     * const { count } = await prisma.telechargement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TelechargementDeleteManyArgs>(args?: SelectSubset<T, TelechargementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Telechargements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Telechargements
     * const telechargement = await prisma.telechargement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TelechargementUpdateManyArgs>(args: SelectSubset<T, TelechargementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Telechargement.
     * @param {TelechargementUpsertArgs} args - Arguments to update or create a Telechargement.
     * @example
     * // Update or create a Telechargement
     * const telechargement = await prisma.telechargement.upsert({
     *   create: {
     *     // ... data to create a Telechargement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Telechargement we want to update
     *   }
     * })
     */
    upsert<T extends TelechargementUpsertArgs>(args: SelectSubset<T, TelechargementUpsertArgs<ExtArgs>>): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Telechargements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementCountArgs} args - Arguments to filter Telechargements to count.
     * @example
     * // Count the number of Telechargements
     * const count = await prisma.telechargement.count({
     *   where: {
     *     // ... the filter for the Telechargements we want to count
     *   }
     * })
    **/
    count<T extends TelechargementCountArgs>(
      args?: Subset<T, TelechargementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TelechargementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Telechargement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TelechargementAggregateArgs>(args: Subset<T, TelechargementAggregateArgs>): Prisma.PrismaPromise<GetTelechargementAggregateType<T>>

    /**
     * Group by Telechargement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TelechargementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TelechargementGroupByArgs['orderBy'] }
        : { orderBy?: TelechargementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TelechargementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelechargementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Telechargement model
   */
  readonly fields: TelechargementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Telechargement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TelechargementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Telechargement model
   */ 
  interface TelechargementFieldRefs {
    readonly id: FieldRef<"Telechargement", 'Int'>
    readonly dateTelechargement: FieldRef<"Telechargement", 'DateTime'>
    readonly utilisateurId: FieldRef<"Telechargement", 'Int'>
    readonly documentId: FieldRef<"Telechargement", 'Int'>
    readonly createdAt: FieldRef<"Telechargement", 'DateTime'>
    readonly updatedAt: FieldRef<"Telechargement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Telechargement findUnique
   */
  export type TelechargementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where: TelechargementWhereUniqueInput
  }

  /**
   * Telechargement findUniqueOrThrow
   */
  export type TelechargementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where: TelechargementWhereUniqueInput
  }

  /**
   * Telechargement findFirst
   */
  export type TelechargementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telechargements.
     */
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }

  /**
   * Telechargement findFirstOrThrow
   */
  export type TelechargementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telechargements.
     */
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }

  /**
   * Telechargement findMany
   */
  export type TelechargementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargements to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }

  /**
   * Telechargement create
   */
  export type TelechargementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The data needed to create a Telechargement.
     */
    data: XOR<TelechargementCreateInput, TelechargementUncheckedCreateInput>
  }

  /**
   * Telechargement createMany
   */
  export type TelechargementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Telechargements.
     */
    data: TelechargementCreateManyInput | TelechargementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Telechargement update
   */
  export type TelechargementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The data needed to update a Telechargement.
     */
    data: XOR<TelechargementUpdateInput, TelechargementUncheckedUpdateInput>
    /**
     * Choose, which Telechargement to update.
     */
    where: TelechargementWhereUniqueInput
  }

  /**
   * Telechargement updateMany
   */
  export type TelechargementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Telechargements.
     */
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyInput>
    /**
     * Filter which Telechargements to update
     */
    where?: TelechargementWhereInput
  }

  /**
   * Telechargement upsert
   */
  export type TelechargementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The filter to search for the Telechargement to update in case it exists.
     */
    where: TelechargementWhereUniqueInput
    /**
     * In case the Telechargement found by the `where` argument doesn't exist, create a new Telechargement with this data.
     */
    create: XOR<TelechargementCreateInput, TelechargementUncheckedCreateInput>
    /**
     * In case the Telechargement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TelechargementUpdateInput, TelechargementUncheckedUpdateInput>
  }

  /**
   * Telechargement delete
   */
  export type TelechargementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter which Telechargement to delete.
     */
    where: TelechargementWhereUniqueInput
  }

  /**
   * Telechargement deleteMany
   */
  export type TelechargementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telechargements to delete
     */
    where?: TelechargementWhereInput
  }

  /**
   * Telechargement without action
   */
  export type TelechargementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelechargementInclude<ExtArgs> | null
  }


  /**
   * Model Consultation
   */

  export type AggregateConsultation = {
    _count: ConsultationCountAggregateOutputType | null
    _avg: ConsultationAvgAggregateOutputType | null
    _sum: ConsultationSumAggregateOutputType | null
    _min: ConsultationMinAggregateOutputType | null
    _max: ConsultationMaxAggregateOutputType | null
  }

  export type ConsultationAvgAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    documentId: number | null
  }

  export type ConsultationSumAggregateOutputType = {
    id: number | null
    utilisateurId: number | null
    documentId: number | null
  }

  export type ConsultationMinAggregateOutputType = {
    id: number | null
    dateConsultation: Date | null
    utilisateurId: number | null
    documentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsultationMaxAggregateOutputType = {
    id: number | null
    dateConsultation: Date | null
    utilisateurId: number | null
    documentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsultationCountAggregateOutputType = {
    id: number
    dateConsultation: number
    utilisateurId: number
    documentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsultationAvgAggregateInputType = {
    id?: true
    utilisateurId?: true
    documentId?: true
  }

  export type ConsultationSumAggregateInputType = {
    id?: true
    utilisateurId?: true
    documentId?: true
  }

  export type ConsultationMinAggregateInputType = {
    id?: true
    dateConsultation?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsultationMaxAggregateInputType = {
    id?: true
    dateConsultation?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsultationCountAggregateInputType = {
    id?: true
    dateConsultation?: true
    utilisateurId?: true
    documentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsultationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultation to aggregate.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultations
    **/
    _count?: true | ConsultationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsultationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsultationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultationMaxAggregateInputType
  }

  export type GetConsultationAggregateType<T extends ConsultationAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultation[P]>
      : GetScalarType<T[P], AggregateConsultation[P]>
  }




  export type ConsultationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationWhereInput
    orderBy?: ConsultationOrderByWithAggregationInput | ConsultationOrderByWithAggregationInput[]
    by: ConsultationScalarFieldEnum[] | ConsultationScalarFieldEnum
    having?: ConsultationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultationCountAggregateInputType | true
    _avg?: ConsultationAvgAggregateInputType
    _sum?: ConsultationSumAggregateInputType
    _min?: ConsultationMinAggregateInputType
    _max?: ConsultationMaxAggregateInputType
  }

  export type ConsultationGroupByOutputType = {
    id: number
    dateConsultation: Date
    utilisateurId: number
    documentId: number
    createdAt: Date
    updatedAt: Date
    _count: ConsultationCountAggregateOutputType | null
    _avg: ConsultationAvgAggregateOutputType | null
    _sum: ConsultationSumAggregateOutputType | null
    _min: ConsultationMinAggregateOutputType | null
    _max: ConsultationMaxAggregateOutputType | null
  }

  type GetConsultationGroupByPayload<T extends ConsultationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultationGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultationGroupByOutputType[P]>
        }
      >
    >


  export type ConsultationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateConsultation?: boolean
    utilisateurId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultation"]>


  export type ConsultationSelectScalar = {
    id?: boolean
    dateConsultation?: boolean
    utilisateurId?: boolean
    documentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsultationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }

  export type $ConsultationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultation"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      document: Prisma.$DocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateConsultation: Date
      utilisateurId: number
      documentId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consultation"]>
    composites: {}
  }

  type ConsultationGetPayload<S extends boolean | null | undefined | ConsultationDefaultArgs> = $Result.GetResult<Prisma.$ConsultationPayload, S>

  type ConsultationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsultationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsultationCountAggregateInputType | true
    }

  export interface ConsultationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultation'], meta: { name: 'Consultation' } }
    /**
     * Find zero or one Consultation that matches the filter.
     * @param {ConsultationFindUniqueArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultationFindUniqueArgs>(args: SelectSubset<T, ConsultationFindUniqueArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Consultation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsultationFindUniqueOrThrowArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Consultation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindFirstArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultationFindFirstArgs>(args?: SelectSubset<T, ConsultationFindFirstArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Consultation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindFirstOrThrowArgs} args - Arguments to find a Consultation
     * @example
     * // Get one Consultation
     * const consultation = await prisma.consultation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Consultations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultations
     * const consultations = await prisma.consultation.findMany()
     * 
     * // Get first 10 Consultations
     * const consultations = await prisma.consultation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultationWithIdOnly = await prisma.consultation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultationFindManyArgs>(args?: SelectSubset<T, ConsultationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Consultation.
     * @param {ConsultationCreateArgs} args - Arguments to create a Consultation.
     * @example
     * // Create one Consultation
     * const Consultation = await prisma.consultation.create({
     *   data: {
     *     // ... data to create a Consultation
     *   }
     * })
     * 
     */
    create<T extends ConsultationCreateArgs>(args: SelectSubset<T, ConsultationCreateArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Consultations.
     * @param {ConsultationCreateManyArgs} args - Arguments to create many Consultations.
     * @example
     * // Create many Consultations
     * const consultation = await prisma.consultation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultationCreateManyArgs>(args?: SelectSubset<T, ConsultationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Consultation.
     * @param {ConsultationDeleteArgs} args - Arguments to delete one Consultation.
     * @example
     * // Delete one Consultation
     * const Consultation = await prisma.consultation.delete({
     *   where: {
     *     // ... filter to delete one Consultation
     *   }
     * })
     * 
     */
    delete<T extends ConsultationDeleteArgs>(args: SelectSubset<T, ConsultationDeleteArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Consultation.
     * @param {ConsultationUpdateArgs} args - Arguments to update one Consultation.
     * @example
     * // Update one Consultation
     * const consultation = await prisma.consultation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultationUpdateArgs>(args: SelectSubset<T, ConsultationUpdateArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Consultations.
     * @param {ConsultationDeleteManyArgs} args - Arguments to filter Consultations to delete.
     * @example
     * // Delete a few Consultations
     * const { count } = await prisma.consultation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultationDeleteManyArgs>(args?: SelectSubset<T, ConsultationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultations
     * const consultation = await prisma.consultation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultationUpdateManyArgs>(args: SelectSubset<T, ConsultationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consultation.
     * @param {ConsultationUpsertArgs} args - Arguments to update or create a Consultation.
     * @example
     * // Update or create a Consultation
     * const consultation = await prisma.consultation.upsert({
     *   create: {
     *     // ... data to create a Consultation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultation we want to update
     *   }
     * })
     */
    upsert<T extends ConsultationUpsertArgs>(args: SelectSubset<T, ConsultationUpsertArgs<ExtArgs>>): Prisma__ConsultationClient<$Result.GetResult<Prisma.$ConsultationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationCountArgs} args - Arguments to filter Consultations to count.
     * @example
     * // Count the number of Consultations
     * const count = await prisma.consultation.count({
     *   where: {
     *     // ... the filter for the Consultations we want to count
     *   }
     * })
    **/
    count<T extends ConsultationCountArgs>(
      args?: Subset<T, ConsultationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultationAggregateArgs>(args: Subset<T, ConsultationAggregateArgs>): Prisma.PrismaPromise<GetConsultationAggregateType<T>>

    /**
     * Group by Consultation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultationGroupByArgs['orderBy'] }
        : { orderBy?: ConsultationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultation model
   */
  readonly fields: ConsultationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultation model
   */ 
  interface ConsultationFieldRefs {
    readonly id: FieldRef<"Consultation", 'Int'>
    readonly dateConsultation: FieldRef<"Consultation", 'DateTime'>
    readonly utilisateurId: FieldRef<"Consultation", 'Int'>
    readonly documentId: FieldRef<"Consultation", 'Int'>
    readonly createdAt: FieldRef<"Consultation", 'DateTime'>
    readonly updatedAt: FieldRef<"Consultation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consultation findUnique
   */
  export type ConsultationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation findUniqueOrThrow
   */
  export type ConsultationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation findFirst
   */
  export type ConsultationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation findFirstOrThrow
   */
  export type ConsultationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultation to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation findMany
   */
  export type ConsultationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where?: ConsultationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationOrderByWithRelationInput | ConsultationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultations.
     */
    cursor?: ConsultationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    distinct?: ConsultationScalarFieldEnum | ConsultationScalarFieldEnum[]
  }

  /**
   * Consultation create
   */
  export type ConsultationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultation.
     */
    data: XOR<ConsultationCreateInput, ConsultationUncheckedCreateInput>
  }

  /**
   * Consultation createMany
   */
  export type ConsultationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultations.
     */
    data: ConsultationCreateManyInput | ConsultationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultation update
   */
  export type ConsultationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultation.
     */
    data: XOR<ConsultationUpdateInput, ConsultationUncheckedUpdateInput>
    /**
     * Choose, which Consultation to update.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation updateMany
   */
  export type ConsultationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultations.
     */
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyInput>
    /**
     * Filter which Consultations to update
     */
    where?: ConsultationWhereInput
  }

  /**
   * Consultation upsert
   */
  export type ConsultationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultation to update in case it exists.
     */
    where: ConsultationWhereUniqueInput
    /**
     * In case the Consultation found by the `where` argument doesn't exist, create a new Consultation with this data.
     */
    create: XOR<ConsultationCreateInput, ConsultationUncheckedCreateInput>
    /**
     * In case the Consultation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultationUpdateInput, ConsultationUncheckedUpdateInput>
  }

  /**
   * Consultation delete
   */
  export type ConsultationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
    /**
     * Filter which Consultation to delete.
     */
    where: ConsultationWhereUniqueInput
  }

  /**
   * Consultation deleteMany
   */
  export type ConsultationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultations to delete
     */
    where?: ConsultationWhereInput
  }

  /**
   * Consultation without action
   */
  export type ConsultationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultation
     */
    select?: ConsultationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilisateurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    motDePasse: 'motDePasse',
    role: 'role',
    reputationScore: 'reputationScore',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    typeOperation: 'typeOperation',
    dateTransaction: 'dateTransaction',
    hashTransaction: 'hashTransaction',
    coutTransaction: 'coutTransaction',
    utilisateurId: 'utilisateurId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const ValidationScalarFieldEnum: {
    id: 'id',
    dateValidation: 'dateValidation',
    hashValidation: 'hashValidation',
    adresseValidateur: 'adresseValidateur',
    sommeDenombreValidation: 'sommeDenombreValidation',
    typeValidation: 'typeValidation',
    utilisateurId: 'utilisateurId',
    emprunterDocId: 'emprunterDocId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ValidationScalarFieldEnum = (typeof ValidationScalarFieldEnum)[keyof typeof ValidationScalarFieldEnum]


  export const EmprunterDocScalarFieldEnum: {
    id: 'id',
    dateEmprunt: 'dateEmprunt',
    dateRetour: 'dateRetour',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmprunterDocScalarFieldEnum = (typeof EmprunterDocScalarFieldEnum)[keyof typeof EmprunterDocScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    auteur: 'auteur',
    fichier: 'fichier',
    dateDepot: 'dateDepot',
    textMeta: 'textMeta',
    hashDocument: 'hashDocument',
    typeDocumentAccepte: 'typeDocumentAccepte',
    tailleFichier: 'tailleFichier',
    timestampCreation: 'timestampCreation',
    utilisateurId: 'utilisateurId',
    validationId: 'validationId',
    categorieId: 'categorieId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const TelechargementScalarFieldEnum: {
    id: 'id',
    dateTelechargement: 'dateTelechargement',
    utilisateurId: 'utilisateurId',
    documentId: 'documentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TelechargementScalarFieldEnum = (typeof TelechargementScalarFieldEnum)[keyof typeof TelechargementScalarFieldEnum]


  export const ConsultationScalarFieldEnum: {
    id: 'id',
    dateConsultation: 'dateConsultation',
    utilisateurId: 'utilisateurId',
    documentId: 'documentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsultationScalarFieldEnum = (typeof ConsultationScalarFieldEnum)[keyof typeof ConsultationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    id?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    email?: StringFilter<"Utilisateur"> | string
    motDePasse?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleFilter<"Utilisateur"> | $Enums.Role
    reputationScore?: IntFilter<"Utilisateur"> | number
    createdAt?: DateTimeFilter<"Utilisateur"> | Date | string
    updatedAt?: DateTimeFilter<"Utilisateur"> | Date | string
    transactions?: TransactionsListRelationFilter
    validations?: ValidationListRelationFilter
    documents?: DocumentListRelationFilter
    consultations?: ConsultationListRelationFilter
    telechargements?: TelechargementListRelationFilter
  }

  export type UtilisateurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    reputationScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactions?: TransactionsOrderByRelationAggregateInput
    validations?: ValidationOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    consultations?: ConsultationOrderByRelationAggregateInput
    telechargements?: TelechargementOrderByRelationAggregateInput
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    motDePasse?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleFilter<"Utilisateur"> | $Enums.Role
    reputationScore?: IntFilter<"Utilisateur"> | number
    createdAt?: DateTimeFilter<"Utilisateur"> | Date | string
    updatedAt?: DateTimeFilter<"Utilisateur"> | Date | string
    transactions?: TransactionsListRelationFilter
    validations?: ValidationListRelationFilter
    documents?: DocumentListRelationFilter
    consultations?: ConsultationListRelationFilter
    telechargements?: TelechargementListRelationFilter
  }, "id" | "email">

  export type UtilisateurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    reputationScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilisateur"> | number
    nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    prenom?: StringWithAggregatesFilter<"Utilisateur"> | string
    email?: StringWithAggregatesFilter<"Utilisateur"> | string
    motDePasse?: StringWithAggregatesFilter<"Utilisateur"> | string
    role?: EnumRoleWithAggregatesFilter<"Utilisateur"> | $Enums.Role
    reputationScore?: IntWithAggregatesFilter<"Utilisateur"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
  }

  export type TransactionsWhereInput = {
    AND?: TransactionsWhereInput | TransactionsWhereInput[]
    OR?: TransactionsWhereInput[]
    NOT?: TransactionsWhereInput | TransactionsWhereInput[]
    id?: IntFilter<"Transactions"> | number
    typeOperation?: StringFilter<"Transactions"> | string
    dateTransaction?: DateTimeFilter<"Transactions"> | Date | string
    hashTransaction?: StringFilter<"Transactions"> | string
    coutTransaction?: FloatFilter<"Transactions"> | number
    utilisateurId?: IntFilter<"Transactions"> | number
    createdAt?: DateTimeFilter<"Transactions"> | Date | string
    updatedAt?: DateTimeFilter<"Transactions"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }

  export type TransactionsOrderByWithRelationInput = {
    id?: SortOrder
    typeOperation?: SortOrder
    dateTransaction?: SortOrder
    hashTransaction?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
  }

  export type TransactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hashTransaction?: string
    AND?: TransactionsWhereInput | TransactionsWhereInput[]
    OR?: TransactionsWhereInput[]
    NOT?: TransactionsWhereInput | TransactionsWhereInput[]
    typeOperation?: StringFilter<"Transactions"> | string
    dateTransaction?: DateTimeFilter<"Transactions"> | Date | string
    coutTransaction?: FloatFilter<"Transactions"> | number
    utilisateurId?: IntFilter<"Transactions"> | number
    createdAt?: DateTimeFilter<"Transactions"> | Date | string
    updatedAt?: DateTimeFilter<"Transactions"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }, "id" | "hashTransaction">

  export type TransactionsOrderByWithAggregationInput = {
    id?: SortOrder
    typeOperation?: SortOrder
    dateTransaction?: SortOrder
    hashTransaction?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionsCountOrderByAggregateInput
    _avg?: TransactionsAvgOrderByAggregateInput
    _max?: TransactionsMaxOrderByAggregateInput
    _min?: TransactionsMinOrderByAggregateInput
    _sum?: TransactionsSumOrderByAggregateInput
  }

  export type TransactionsScalarWhereWithAggregatesInput = {
    AND?: TransactionsScalarWhereWithAggregatesInput | TransactionsScalarWhereWithAggregatesInput[]
    OR?: TransactionsScalarWhereWithAggregatesInput[]
    NOT?: TransactionsScalarWhereWithAggregatesInput | TransactionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transactions"> | number
    typeOperation?: StringWithAggregatesFilter<"Transactions"> | string
    dateTransaction?: DateTimeWithAggregatesFilter<"Transactions"> | Date | string
    hashTransaction?: StringWithAggregatesFilter<"Transactions"> | string
    coutTransaction?: FloatWithAggregatesFilter<"Transactions"> | number
    utilisateurId?: IntWithAggregatesFilter<"Transactions"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Transactions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transactions"> | Date | string
  }

  export type ValidationWhereInput = {
    AND?: ValidationWhereInput | ValidationWhereInput[]
    OR?: ValidationWhereInput[]
    NOT?: ValidationWhereInput | ValidationWhereInput[]
    id?: IntFilter<"Validation"> | number
    dateValidation?: DateTimeFilter<"Validation"> | Date | string
    hashValidation?: StringFilter<"Validation"> | string
    adresseValidateur?: StringFilter<"Validation"> | string
    sommeDenombreValidation?: StringFilter<"Validation"> | string
    typeValidation?: StringFilter<"Validation"> | string
    utilisateurId?: IntFilter<"Validation"> | number
    emprunterDocId?: IntNullableFilter<"Validation"> | number | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    emprunterDoc?: XOR<EmprunterDocNullableRelationFilter, EmprunterDocWhereInput> | null
    documents?: DocumentListRelationFilter
  }

  export type ValidationOrderByWithRelationInput = {
    id?: SortOrder
    dateValidation?: SortOrder
    hashValidation?: SortOrder
    adresseValidateur?: SortOrder
    sommeDenombreValidation?: SortOrder
    typeValidation?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    emprunterDoc?: EmprunterDocOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type ValidationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hashValidation?: string
    AND?: ValidationWhereInput | ValidationWhereInput[]
    OR?: ValidationWhereInput[]
    NOT?: ValidationWhereInput | ValidationWhereInput[]
    dateValidation?: DateTimeFilter<"Validation"> | Date | string
    adresseValidateur?: StringFilter<"Validation"> | string
    sommeDenombreValidation?: StringFilter<"Validation"> | string
    typeValidation?: StringFilter<"Validation"> | string
    utilisateurId?: IntFilter<"Validation"> | number
    emprunterDocId?: IntNullableFilter<"Validation"> | number | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    emprunterDoc?: XOR<EmprunterDocNullableRelationFilter, EmprunterDocWhereInput> | null
    documents?: DocumentListRelationFilter
  }, "id" | "hashValidation">

  export type ValidationOrderByWithAggregationInput = {
    id?: SortOrder
    dateValidation?: SortOrder
    hashValidation?: SortOrder
    adresseValidateur?: SortOrder
    sommeDenombreValidation?: SortOrder
    typeValidation?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ValidationCountOrderByAggregateInput
    _avg?: ValidationAvgOrderByAggregateInput
    _max?: ValidationMaxOrderByAggregateInput
    _min?: ValidationMinOrderByAggregateInput
    _sum?: ValidationSumOrderByAggregateInput
  }

  export type ValidationScalarWhereWithAggregatesInput = {
    AND?: ValidationScalarWhereWithAggregatesInput | ValidationScalarWhereWithAggregatesInput[]
    OR?: ValidationScalarWhereWithAggregatesInput[]
    NOT?: ValidationScalarWhereWithAggregatesInput | ValidationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Validation"> | number
    dateValidation?: DateTimeWithAggregatesFilter<"Validation"> | Date | string
    hashValidation?: StringWithAggregatesFilter<"Validation"> | string
    adresseValidateur?: StringWithAggregatesFilter<"Validation"> | string
    sommeDenombreValidation?: StringWithAggregatesFilter<"Validation"> | string
    typeValidation?: StringWithAggregatesFilter<"Validation"> | string
    utilisateurId?: IntWithAggregatesFilter<"Validation"> | number
    emprunterDocId?: IntNullableWithAggregatesFilter<"Validation"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Validation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Validation"> | Date | string
  }

  export type EmprunterDocWhereInput = {
    AND?: EmprunterDocWhereInput | EmprunterDocWhereInput[]
    OR?: EmprunterDocWhereInput[]
    NOT?: EmprunterDocWhereInput | EmprunterDocWhereInput[]
    id?: IntFilter<"EmprunterDoc"> | number
    dateEmprunt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    dateRetour?: DateTimeNullableFilter<"EmprunterDoc"> | Date | string | null
    createdAt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    updatedAt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    validations?: ValidationListRelationFilter
  }

  export type EmprunterDocOrderByWithRelationInput = {
    id?: SortOrder
    dateEmprunt?: SortOrder
    dateRetour?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validations?: ValidationOrderByRelationAggregateInput
  }

  export type EmprunterDocWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmprunterDocWhereInput | EmprunterDocWhereInput[]
    OR?: EmprunterDocWhereInput[]
    NOT?: EmprunterDocWhereInput | EmprunterDocWhereInput[]
    dateEmprunt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    dateRetour?: DateTimeNullableFilter<"EmprunterDoc"> | Date | string | null
    createdAt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    updatedAt?: DateTimeFilter<"EmprunterDoc"> | Date | string
    validations?: ValidationListRelationFilter
  }, "id">

  export type EmprunterDocOrderByWithAggregationInput = {
    id?: SortOrder
    dateEmprunt?: SortOrder
    dateRetour?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmprunterDocCountOrderByAggregateInput
    _avg?: EmprunterDocAvgOrderByAggregateInput
    _max?: EmprunterDocMaxOrderByAggregateInput
    _min?: EmprunterDocMinOrderByAggregateInput
    _sum?: EmprunterDocSumOrderByAggregateInput
  }

  export type EmprunterDocScalarWhereWithAggregatesInput = {
    AND?: EmprunterDocScalarWhereWithAggregatesInput | EmprunterDocScalarWhereWithAggregatesInput[]
    OR?: EmprunterDocScalarWhereWithAggregatesInput[]
    NOT?: EmprunterDocScalarWhereWithAggregatesInput | EmprunterDocScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmprunterDoc"> | number
    dateEmprunt?: DateTimeWithAggregatesFilter<"EmprunterDoc"> | Date | string
    dateRetour?: DateTimeNullableWithAggregatesFilter<"EmprunterDoc"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmprunterDoc"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmprunterDoc"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: IntFilter<"Document"> | number
    titre?: StringFilter<"Document"> | string
    auteur?: StringFilter<"Document"> | string
    fichier?: StringFilter<"Document"> | string
    dateDepot?: DateTimeFilter<"Document"> | Date | string
    textMeta?: StringNullableFilter<"Document"> | string | null
    hashDocument?: StringFilter<"Document"> | string
    typeDocumentAccepte?: StringFilter<"Document"> | string
    tailleFichier?: IntFilter<"Document"> | number
    timestampCreation?: DateTimeFilter<"Document"> | Date | string
    utilisateurId?: IntFilter<"Document"> | number
    validationId?: IntNullableFilter<"Document"> | number | null
    categorieId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    validation?: XOR<ValidationNullableRelationFilter, ValidationWhereInput> | null
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    consultations?: ConsultationListRelationFilter
    telechargements?: TelechargementListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    auteur?: SortOrder
    fichier?: SortOrder
    dateDepot?: SortOrder
    textMeta?: SortOrderInput | SortOrder
    hashDocument?: SortOrder
    typeDocumentAccepte?: SortOrder
    tailleFichier?: SortOrder
    timestampCreation?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrderInput | SortOrder
    categorieId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    validation?: ValidationOrderByWithRelationInput
    categorie?: CategorieOrderByWithRelationInput
    consultations?: ConsultationOrderByRelationAggregateInput
    telechargements?: TelechargementOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hashDocument?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    titre?: StringFilter<"Document"> | string
    auteur?: StringFilter<"Document"> | string
    fichier?: StringFilter<"Document"> | string
    dateDepot?: DateTimeFilter<"Document"> | Date | string
    textMeta?: StringNullableFilter<"Document"> | string | null
    typeDocumentAccepte?: StringFilter<"Document"> | string
    tailleFichier?: IntFilter<"Document"> | number
    timestampCreation?: DateTimeFilter<"Document"> | Date | string
    utilisateurId?: IntFilter<"Document"> | number
    validationId?: IntNullableFilter<"Document"> | number | null
    categorieId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    validation?: XOR<ValidationNullableRelationFilter, ValidationWhereInput> | null
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    consultations?: ConsultationListRelationFilter
    telechargements?: TelechargementListRelationFilter
  }, "id" | "hashDocument">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    auteur?: SortOrder
    fichier?: SortOrder
    dateDepot?: SortOrder
    textMeta?: SortOrderInput | SortOrder
    hashDocument?: SortOrder
    typeDocumentAccepte?: SortOrder
    tailleFichier?: SortOrder
    timestampCreation?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrderInput | SortOrder
    categorieId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Document"> | number
    titre?: StringWithAggregatesFilter<"Document"> | string
    auteur?: StringWithAggregatesFilter<"Document"> | string
    fichier?: StringWithAggregatesFilter<"Document"> | string
    dateDepot?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    textMeta?: StringNullableWithAggregatesFilter<"Document"> | string | null
    hashDocument?: StringWithAggregatesFilter<"Document"> | string
    typeDocumentAccepte?: StringWithAggregatesFilter<"Document"> | string
    tailleFichier?: IntWithAggregatesFilter<"Document"> | number
    timestampCreation?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    utilisateurId?: IntWithAggregatesFilter<"Document"> | number
    validationId?: IntNullableWithAggregatesFilter<"Document"> | number | null
    categorieId?: IntWithAggregatesFilter<"Document"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type CategorieWhereInput = {
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    id?: IntFilter<"Categorie"> | number
    libelle?: StringFilter<"Categorie"> | string
    createdAt?: DateTimeFilter<"Categorie"> | Date | string
    updatedAt?: DateTimeFilter<"Categorie"> | Date | string
    documents?: DocumentListRelationFilter
  }

  export type CategorieOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type CategorieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    libelle?: string
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    createdAt?: DateTimeFilter<"Categorie"> | Date | string
    updatedAt?: DateTimeFilter<"Categorie"> | Date | string
    documents?: DocumentListRelationFilter
  }, "id" | "libelle">

  export type CategorieOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategorieCountOrderByAggregateInput
    _avg?: CategorieAvgOrderByAggregateInput
    _max?: CategorieMaxOrderByAggregateInput
    _min?: CategorieMinOrderByAggregateInput
    _sum?: CategorieSumOrderByAggregateInput
  }

  export type CategorieScalarWhereWithAggregatesInput = {
    AND?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    OR?: CategorieScalarWhereWithAggregatesInput[]
    NOT?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorie"> | number
    libelle?: StringWithAggregatesFilter<"Categorie"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Categorie"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Categorie"> | Date | string
  }

  export type TelechargementWhereInput = {
    AND?: TelechargementWhereInput | TelechargementWhereInput[]
    OR?: TelechargementWhereInput[]
    NOT?: TelechargementWhereInput | TelechargementWhereInput[]
    id?: IntFilter<"Telechargement"> | number
    dateTelechargement?: DateTimeFilter<"Telechargement"> | Date | string
    utilisateurId?: IntFilter<"Telechargement"> | number
    documentId?: IntFilter<"Telechargement"> | number
    createdAt?: DateTimeFilter<"Telechargement"> | Date | string
    updatedAt?: DateTimeFilter<"Telechargement"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }

  export type TelechargementOrderByWithRelationInput = {
    id?: SortOrder
    dateTelechargement?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    document?: DocumentOrderByWithRelationInput
  }

  export type TelechargementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TelechargementWhereInput | TelechargementWhereInput[]
    OR?: TelechargementWhereInput[]
    NOT?: TelechargementWhereInput | TelechargementWhereInput[]
    dateTelechargement?: DateTimeFilter<"Telechargement"> | Date | string
    utilisateurId?: IntFilter<"Telechargement"> | number
    documentId?: IntFilter<"Telechargement"> | number
    createdAt?: DateTimeFilter<"Telechargement"> | Date | string
    updatedAt?: DateTimeFilter<"Telechargement"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }, "id">

  export type TelechargementOrderByWithAggregationInput = {
    id?: SortOrder
    dateTelechargement?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TelechargementCountOrderByAggregateInput
    _avg?: TelechargementAvgOrderByAggregateInput
    _max?: TelechargementMaxOrderByAggregateInput
    _min?: TelechargementMinOrderByAggregateInput
    _sum?: TelechargementSumOrderByAggregateInput
  }

  export type TelechargementScalarWhereWithAggregatesInput = {
    AND?: TelechargementScalarWhereWithAggregatesInput | TelechargementScalarWhereWithAggregatesInput[]
    OR?: TelechargementScalarWhereWithAggregatesInput[]
    NOT?: TelechargementScalarWhereWithAggregatesInput | TelechargementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Telechargement"> | number
    dateTelechargement?: DateTimeWithAggregatesFilter<"Telechargement"> | Date | string
    utilisateurId?: IntWithAggregatesFilter<"Telechargement"> | number
    documentId?: IntWithAggregatesFilter<"Telechargement"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Telechargement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Telechargement"> | Date | string
  }

  export type ConsultationWhereInput = {
    AND?: ConsultationWhereInput | ConsultationWhereInput[]
    OR?: ConsultationWhereInput[]
    NOT?: ConsultationWhereInput | ConsultationWhereInput[]
    id?: IntFilter<"Consultation"> | number
    dateConsultation?: DateTimeFilter<"Consultation"> | Date | string
    utilisateurId?: IntFilter<"Consultation"> | number
    documentId?: IntFilter<"Consultation"> | number
    createdAt?: DateTimeFilter<"Consultation"> | Date | string
    updatedAt?: DateTimeFilter<"Consultation"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }

  export type ConsultationOrderByWithRelationInput = {
    id?: SortOrder
    dateConsultation?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    document?: DocumentOrderByWithRelationInput
  }

  export type ConsultationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsultationWhereInput | ConsultationWhereInput[]
    OR?: ConsultationWhereInput[]
    NOT?: ConsultationWhereInput | ConsultationWhereInput[]
    dateConsultation?: DateTimeFilter<"Consultation"> | Date | string
    utilisateurId?: IntFilter<"Consultation"> | number
    documentId?: IntFilter<"Consultation"> | number
    createdAt?: DateTimeFilter<"Consultation"> | Date | string
    updatedAt?: DateTimeFilter<"Consultation"> | Date | string
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }, "id">

  export type ConsultationOrderByWithAggregationInput = {
    id?: SortOrder
    dateConsultation?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsultationCountOrderByAggregateInput
    _avg?: ConsultationAvgOrderByAggregateInput
    _max?: ConsultationMaxOrderByAggregateInput
    _min?: ConsultationMinOrderByAggregateInput
    _sum?: ConsultationSumOrderByAggregateInput
  }

  export type ConsultationScalarWhereWithAggregatesInput = {
    AND?: ConsultationScalarWhereWithAggregatesInput | ConsultationScalarWhereWithAggregatesInput[]
    OR?: ConsultationScalarWhereWithAggregatesInput[]
    NOT?: ConsultationScalarWhereWithAggregatesInput | ConsultationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Consultation"> | number
    dateConsultation?: DateTimeWithAggregatesFilter<"Consultation"> | Date | string
    utilisateurId?: IntWithAggregatesFilter<"Consultation"> | number
    documentId?: IntWithAggregatesFilter<"Consultation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Consultation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consultation"> | Date | string
  }

  export type UtilisateurCreateInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UtilisateurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsCreateInput = {
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionsUncheckedCreateInput = {
    id?: number
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsUpdateInput = {
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsCreateManyInput = {
    id?: number
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsUpdateManyMutationInput = {
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationCreateInput = {
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutValidationsInput
    emprunterDoc?: EmprunterDocCreateNestedOneWithoutValidationsInput
    documents?: DocumentCreateNestedManyWithoutValidationInput
  }

  export type ValidationUncheckedCreateInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    emprunterDocId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutValidationInput
  }

  export type ValidationUpdateInput = {
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutValidationsNestedInput
    emprunterDoc?: EmprunterDocUpdateOneWithoutValidationsNestedInput
    documents?: DocumentUpdateManyWithoutValidationNestedInput
  }

  export type ValidationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    emprunterDocId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutValidationNestedInput
  }

  export type ValidationCreateManyInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    emprunterDocId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationUpdateManyMutationInput = {
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    emprunterDocId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmprunterDocCreateInput = {
    dateEmprunt?: Date | string
    dateRetour?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationCreateNestedManyWithoutEmprunterDocInput
  }

  export type EmprunterDocUncheckedCreateInput = {
    id?: number
    dateEmprunt?: Date | string
    dateRetour?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationUncheckedCreateNestedManyWithoutEmprunterDocInput
  }

  export type EmprunterDocUpdateInput = {
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUpdateManyWithoutEmprunterDocNestedInput
  }

  export type EmprunterDocUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUncheckedUpdateManyWithoutEmprunterDocNestedInput
  }

  export type EmprunterDocCreateManyInput = {
    id?: number
    dateEmprunt?: Date | string
    dateRetour?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmprunterDocUpdateManyMutationInput = {
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmprunterDocUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutDocumentsInput
    validation?: ValidationCreateNestedOneWithoutDocumentsInput
    categorie: CategorieCreateNestedOneWithoutDocumentsInput
    consultations?: ConsultationCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput
    validation?: ValidationUpdateOneWithoutDocumentsNestedInput
    categorie?: CategorieUpdateOneRequiredWithoutDocumentsNestedInput
    consultations?: ConsultationUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategorieCreateInput = {
    libelle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUncheckedCreateInput = {
    id?: number
    libelle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieCreateManyInput = {
    id?: number
    libelle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategorieUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementCreateInput = {
    dateTelechargement?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutTelechargementsInput
    document: DocumentCreateNestedOneWithoutTelechargementsInput
  }

  export type TelechargementUncheckedCreateInput = {
    id?: number
    dateTelechargement?: Date | string
    utilisateurId: number
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementUpdateInput = {
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutTelechargementsNestedInput
    document?: DocumentUpdateOneRequiredWithoutTelechargementsNestedInput
  }

  export type TelechargementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementCreateManyInput = {
    id?: number
    dateTelechargement?: Date | string
    utilisateurId: number
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementUpdateManyMutationInput = {
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationCreateInput = {
    dateConsultation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutConsultationsInput
    document: DocumentCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateInput = {
    id?: number
    dateConsultation?: Date | string
    utilisateurId: number
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationUpdateInput = {
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutConsultationsNestedInput
    document?: DocumentUpdateOneRequiredWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationCreateManyInput = {
    id?: number
    dateConsultation?: Date | string
    utilisateurId: number
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationUpdateManyMutationInput = {
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransactionsListRelationFilter = {
    every?: TransactionsWhereInput
    some?: TransactionsWhereInput
    none?: TransactionsWhereInput
  }

  export type ValidationListRelationFilter = {
    every?: ValidationWhereInput
    some?: ValidationWhereInput
    none?: ValidationWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ConsultationListRelationFilter = {
    every?: ConsultationWhereInput
    some?: ConsultationWhereInput
    none?: ConsultationWhereInput
  }

  export type TelechargementListRelationFilter = {
    every?: TelechargementWhereInput
    some?: TelechargementWhereInput
    none?: TelechargementWhereInput
  }

  export type TransactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValidationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsultationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TelechargementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilisateurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    reputationScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    id?: SortOrder
    reputationScore?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    reputationScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    motDePasse?: SortOrder
    role?: SortOrder
    reputationScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    id?: SortOrder
    reputationScore?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UtilisateurRelationFilter = {
    is?: UtilisateurWhereInput
    isNot?: UtilisateurWhereInput
  }

  export type TransactionsCountOrderByAggregateInput = {
    id?: SortOrder
    typeOperation?: SortOrder
    dateTransaction?: SortOrder
    hashTransaction?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
  }

  export type TransactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    typeOperation?: SortOrder
    dateTransaction?: SortOrder
    hashTransaction?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsMinOrderByAggregateInput = {
    id?: SortOrder
    typeOperation?: SortOrder
    dateTransaction?: SortOrder
    hashTransaction?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsSumOrderByAggregateInput = {
    id?: SortOrder
    coutTransaction?: SortOrder
    utilisateurId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EmprunterDocNullableRelationFilter = {
    is?: EmprunterDocWhereInput | null
    isNot?: EmprunterDocWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ValidationCountOrderByAggregateInput = {
    id?: SortOrder
    dateValidation?: SortOrder
    hashValidation?: SortOrder
    adresseValidateur?: SortOrder
    sommeDenombreValidation?: SortOrder
    typeValidation?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationAvgOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrder
  }

  export type ValidationMaxOrderByAggregateInput = {
    id?: SortOrder
    dateValidation?: SortOrder
    hashValidation?: SortOrder
    adresseValidateur?: SortOrder
    sommeDenombreValidation?: SortOrder
    typeValidation?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationMinOrderByAggregateInput = {
    id?: SortOrder
    dateValidation?: SortOrder
    hashValidation?: SortOrder
    adresseValidateur?: SortOrder
    sommeDenombreValidation?: SortOrder
    typeValidation?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationSumOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    emprunterDocId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EmprunterDocCountOrderByAggregateInput = {
    id?: SortOrder
    dateEmprunt?: SortOrder
    dateRetour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmprunterDocAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmprunterDocMaxOrderByAggregateInput = {
    id?: SortOrder
    dateEmprunt?: SortOrder
    dateRetour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmprunterDocMinOrderByAggregateInput = {
    id?: SortOrder
    dateEmprunt?: SortOrder
    dateRetour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmprunterDocSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ValidationNullableRelationFilter = {
    is?: ValidationWhereInput | null
    isNot?: ValidationWhereInput | null
  }

  export type CategorieRelationFilter = {
    is?: CategorieWhereInput
    isNot?: CategorieWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    auteur?: SortOrder
    fichier?: SortOrder
    dateDepot?: SortOrder
    textMeta?: SortOrder
    hashDocument?: SortOrder
    typeDocumentAccepte?: SortOrder
    tailleFichier?: SortOrder
    timestampCreation?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrder
    categorieId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    tailleFichier?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrder
    categorieId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    auteur?: SortOrder
    fichier?: SortOrder
    dateDepot?: SortOrder
    textMeta?: SortOrder
    hashDocument?: SortOrder
    typeDocumentAccepte?: SortOrder
    tailleFichier?: SortOrder
    timestampCreation?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrder
    categorieId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    auteur?: SortOrder
    fichier?: SortOrder
    dateDepot?: SortOrder
    textMeta?: SortOrder
    hashDocument?: SortOrder
    typeDocumentAccepte?: SortOrder
    tailleFichier?: SortOrder
    timestampCreation?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrder
    categorieId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    tailleFichier?: SortOrder
    utilisateurId?: SortOrder
    validationId?: SortOrder
    categorieId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CategorieCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorieMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DocumentRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type TelechargementCountOrderByAggregateInput = {
    id?: SortOrder
    dateTelechargement?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelechargementAvgOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
  }

  export type TelechargementMaxOrderByAggregateInput = {
    id?: SortOrder
    dateTelechargement?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelechargementMinOrderByAggregateInput = {
    id?: SortOrder
    dateTelechargement?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelechargementSumOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
  }

  export type ConsultationCountOrderByAggregateInput = {
    id?: SortOrder
    dateConsultation?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsultationAvgOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
  }

  export type ConsultationMaxOrderByAggregateInput = {
    id?: SortOrder
    dateConsultation?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsultationMinOrderByAggregateInput = {
    id?: SortOrder
    dateConsultation?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsultationSumOrderByAggregateInput = {
    id?: SortOrder
    utilisateurId?: SortOrder
    documentId?: SortOrder
  }

  export type TransactionsCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput> | TransactionsCreateWithoutUtilisateurInput[] | TransactionsUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUtilisateurInput | TransactionsCreateOrConnectWithoutUtilisateurInput[]
    createMany?: TransactionsCreateManyUtilisateurInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type ValidationCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput> | ValidationCreateWithoutUtilisateurInput[] | ValidationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUtilisateurInput | ValidationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ValidationCreateManyUtilisateurInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput> | DocumentCreateWithoutUtilisateurInput[] | DocumentUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUtilisateurInput | DocumentCreateOrConnectWithoutUtilisateurInput[]
    createMany?: DocumentCreateManyUtilisateurInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ConsultationCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput> | ConsultationCreateWithoutUtilisateurInput[] | ConsultationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutUtilisateurInput | ConsultationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ConsultationCreateManyUtilisateurInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type TelechargementCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput> | TelechargementCreateWithoutUtilisateurInput[] | TelechargementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUtilisateurInput | TelechargementCreateOrConnectWithoutUtilisateurInput[]
    createMany?: TelechargementCreateManyUtilisateurInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput> | TransactionsCreateWithoutUtilisateurInput[] | TransactionsUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUtilisateurInput | TransactionsCreateOrConnectWithoutUtilisateurInput[]
    createMany?: TransactionsCreateManyUtilisateurInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type ValidationUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput> | ValidationCreateWithoutUtilisateurInput[] | ValidationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUtilisateurInput | ValidationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ValidationCreateManyUtilisateurInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput> | DocumentCreateWithoutUtilisateurInput[] | DocumentUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUtilisateurInput | DocumentCreateOrConnectWithoutUtilisateurInput[]
    createMany?: DocumentCreateManyUtilisateurInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput> | ConsultationCreateWithoutUtilisateurInput[] | ConsultationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutUtilisateurInput | ConsultationCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ConsultationCreateManyUtilisateurInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput> | TelechargementCreateWithoutUtilisateurInput[] | TelechargementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUtilisateurInput | TelechargementCreateOrConnectWithoutUtilisateurInput[]
    createMany?: TelechargementCreateManyUtilisateurInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransactionsUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput> | TransactionsCreateWithoutUtilisateurInput[] | TransactionsUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUtilisateurInput | TransactionsCreateOrConnectWithoutUtilisateurInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUtilisateurInput | TransactionsUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: TransactionsCreateManyUtilisateurInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUtilisateurInput | TransactionsUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUtilisateurInput | TransactionsUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type ValidationUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput> | ValidationCreateWithoutUtilisateurInput[] | ValidationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUtilisateurInput | ValidationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutUtilisateurInput | ValidationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ValidationCreateManyUtilisateurInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutUtilisateurInput | ValidationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutUtilisateurInput | ValidationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput> | DocumentCreateWithoutUtilisateurInput[] | DocumentUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUtilisateurInput | DocumentCreateOrConnectWithoutUtilisateurInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUtilisateurInput | DocumentUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: DocumentCreateManyUtilisateurInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUtilisateurInput | DocumentUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUtilisateurInput | DocumentUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ConsultationUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput> | ConsultationCreateWithoutUtilisateurInput[] | ConsultationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutUtilisateurInput | ConsultationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutUtilisateurInput | ConsultationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ConsultationCreateManyUtilisateurInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutUtilisateurInput | ConsultationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutUtilisateurInput | ConsultationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type TelechargementUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput> | TelechargementCreateWithoutUtilisateurInput[] | TelechargementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUtilisateurInput | TelechargementCreateOrConnectWithoutUtilisateurInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutUtilisateurInput | TelechargementUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: TelechargementCreateManyUtilisateurInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutUtilisateurInput | TelechargementUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutUtilisateurInput | TelechargementUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput> | TransactionsCreateWithoutUtilisateurInput[] | TransactionsUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUtilisateurInput | TransactionsCreateOrConnectWithoutUtilisateurInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUtilisateurInput | TransactionsUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: TransactionsCreateManyUtilisateurInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUtilisateurInput | TransactionsUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUtilisateurInput | TransactionsUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput> | ValidationCreateWithoutUtilisateurInput[] | ValidationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUtilisateurInput | ValidationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutUtilisateurInput | ValidationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ValidationCreateManyUtilisateurInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutUtilisateurInput | ValidationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutUtilisateurInput | ValidationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput> | DocumentCreateWithoutUtilisateurInput[] | DocumentUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUtilisateurInput | DocumentCreateOrConnectWithoutUtilisateurInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUtilisateurInput | DocumentUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: DocumentCreateManyUtilisateurInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUtilisateurInput | DocumentUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUtilisateurInput | DocumentUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput> | ConsultationCreateWithoutUtilisateurInput[] | ConsultationUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutUtilisateurInput | ConsultationCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutUtilisateurInput | ConsultationUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ConsultationCreateManyUtilisateurInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutUtilisateurInput | ConsultationUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutUtilisateurInput | ConsultationUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput> | TelechargementCreateWithoutUtilisateurInput[] | TelechargementUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUtilisateurInput | TelechargementCreateOrConnectWithoutUtilisateurInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutUtilisateurInput | TelechargementUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: TelechargementCreateManyUtilisateurInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutUtilisateurInput | TelechargementUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutUtilisateurInput | TelechargementUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UtilisateurCreateWithoutTransactionsInput, UtilisateurUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutTransactionsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UtilisateurUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutTransactionsInput, UtilisateurUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutTransactionsInput
    upsert?: UtilisateurUpsertWithoutTransactionsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutTransactionsInput, UtilisateurUpdateWithoutTransactionsInput>, UtilisateurUncheckedUpdateWithoutTransactionsInput>
  }

  export type UtilisateurCreateNestedOneWithoutValidationsInput = {
    create?: XOR<UtilisateurCreateWithoutValidationsInput, UtilisateurUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutValidationsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type EmprunterDocCreateNestedOneWithoutValidationsInput = {
    create?: XOR<EmprunterDocCreateWithoutValidationsInput, EmprunterDocUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: EmprunterDocCreateOrConnectWithoutValidationsInput
    connect?: EmprunterDocWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutValidationInput = {
    create?: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput> | DocumentCreateWithoutValidationInput[] | DocumentUncheckedCreateWithoutValidationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutValidationInput | DocumentCreateOrConnectWithoutValidationInput[]
    createMany?: DocumentCreateManyValidationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutValidationInput = {
    create?: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput> | DocumentCreateWithoutValidationInput[] | DocumentUncheckedCreateWithoutValidationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutValidationInput | DocumentCreateOrConnectWithoutValidationInput[]
    createMany?: DocumentCreateManyValidationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UtilisateurUpdateOneRequiredWithoutValidationsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutValidationsInput, UtilisateurUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutValidationsInput
    upsert?: UtilisateurUpsertWithoutValidationsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutValidationsInput, UtilisateurUpdateWithoutValidationsInput>, UtilisateurUncheckedUpdateWithoutValidationsInput>
  }

  export type EmprunterDocUpdateOneWithoutValidationsNestedInput = {
    create?: XOR<EmprunterDocCreateWithoutValidationsInput, EmprunterDocUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: EmprunterDocCreateOrConnectWithoutValidationsInput
    upsert?: EmprunterDocUpsertWithoutValidationsInput
    disconnect?: EmprunterDocWhereInput | boolean
    delete?: EmprunterDocWhereInput | boolean
    connect?: EmprunterDocWhereUniqueInput
    update?: XOR<XOR<EmprunterDocUpdateToOneWithWhereWithoutValidationsInput, EmprunterDocUpdateWithoutValidationsInput>, EmprunterDocUncheckedUpdateWithoutValidationsInput>
  }

  export type DocumentUpdateManyWithoutValidationNestedInput = {
    create?: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput> | DocumentCreateWithoutValidationInput[] | DocumentUncheckedCreateWithoutValidationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutValidationInput | DocumentCreateOrConnectWithoutValidationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutValidationInput | DocumentUpsertWithWhereUniqueWithoutValidationInput[]
    createMany?: DocumentCreateManyValidationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutValidationInput | DocumentUpdateWithWhereUniqueWithoutValidationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutValidationInput | DocumentUpdateManyWithWhereWithoutValidationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DocumentUncheckedUpdateManyWithoutValidationNestedInput = {
    create?: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput> | DocumentCreateWithoutValidationInput[] | DocumentUncheckedCreateWithoutValidationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutValidationInput | DocumentCreateOrConnectWithoutValidationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutValidationInput | DocumentUpsertWithWhereUniqueWithoutValidationInput[]
    createMany?: DocumentCreateManyValidationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutValidationInput | DocumentUpdateWithWhereUniqueWithoutValidationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutValidationInput | DocumentUpdateManyWithWhereWithoutValidationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ValidationCreateNestedManyWithoutEmprunterDocInput = {
    create?: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput> | ValidationCreateWithoutEmprunterDocInput[] | ValidationUncheckedCreateWithoutEmprunterDocInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutEmprunterDocInput | ValidationCreateOrConnectWithoutEmprunterDocInput[]
    createMany?: ValidationCreateManyEmprunterDocInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ValidationUncheckedCreateNestedManyWithoutEmprunterDocInput = {
    create?: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput> | ValidationCreateWithoutEmprunterDocInput[] | ValidationUncheckedCreateWithoutEmprunterDocInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutEmprunterDocInput | ValidationCreateOrConnectWithoutEmprunterDocInput[]
    createMany?: ValidationCreateManyEmprunterDocInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ValidationUpdateManyWithoutEmprunterDocNestedInput = {
    create?: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput> | ValidationCreateWithoutEmprunterDocInput[] | ValidationUncheckedCreateWithoutEmprunterDocInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutEmprunterDocInput | ValidationCreateOrConnectWithoutEmprunterDocInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutEmprunterDocInput | ValidationUpsertWithWhereUniqueWithoutEmprunterDocInput[]
    createMany?: ValidationCreateManyEmprunterDocInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutEmprunterDocInput | ValidationUpdateWithWhereUniqueWithoutEmprunterDocInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutEmprunterDocInput | ValidationUpdateManyWithWhereWithoutEmprunterDocInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ValidationUncheckedUpdateManyWithoutEmprunterDocNestedInput = {
    create?: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput> | ValidationCreateWithoutEmprunterDocInput[] | ValidationUncheckedCreateWithoutEmprunterDocInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutEmprunterDocInput | ValidationCreateOrConnectWithoutEmprunterDocInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutEmprunterDocInput | ValidationUpsertWithWhereUniqueWithoutEmprunterDocInput[]
    createMany?: ValidationCreateManyEmprunterDocInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutEmprunterDocInput | ValidationUpdateWithWhereUniqueWithoutEmprunterDocInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutEmprunterDocInput | ValidationUpdateManyWithWhereWithoutEmprunterDocInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UtilisateurCreateWithoutDocumentsInput, UtilisateurUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutDocumentsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ValidationCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ValidationCreateWithoutDocumentsInput, ValidationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ValidationCreateOrConnectWithoutDocumentsInput
    connect?: ValidationWhereUniqueInput
  }

  export type CategorieCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<CategorieCreateWithoutDocumentsInput, CategorieUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutDocumentsInput
    connect?: CategorieWhereUniqueInput
  }

  export type ConsultationCreateNestedManyWithoutDocumentInput = {
    create?: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput> | ConsultationCreateWithoutDocumentInput[] | ConsultationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDocumentInput | ConsultationCreateOrConnectWithoutDocumentInput[]
    createMany?: ConsultationCreateManyDocumentInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type TelechargementCreateNestedManyWithoutDocumentInput = {
    create?: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput> | TelechargementCreateWithoutDocumentInput[] | TelechargementUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutDocumentInput | TelechargementCreateOrConnectWithoutDocumentInput[]
    createMany?: TelechargementCreateManyDocumentInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type ConsultationUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput> | ConsultationCreateWithoutDocumentInput[] | ConsultationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDocumentInput | ConsultationCreateOrConnectWithoutDocumentInput[]
    createMany?: ConsultationCreateManyDocumentInputEnvelope
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
  }

  export type TelechargementUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput> | TelechargementCreateWithoutDocumentInput[] | TelechargementUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutDocumentInput | TelechargementCreateOrConnectWithoutDocumentInput[]
    createMany?: TelechargementCreateManyDocumentInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutDocumentsInput, UtilisateurUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutDocumentsInput
    upsert?: UtilisateurUpsertWithoutDocumentsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutDocumentsInput, UtilisateurUpdateWithoutDocumentsInput>, UtilisateurUncheckedUpdateWithoutDocumentsInput>
  }

  export type ValidationUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ValidationCreateWithoutDocumentsInput, ValidationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ValidationCreateOrConnectWithoutDocumentsInput
    upsert?: ValidationUpsertWithoutDocumentsInput
    disconnect?: ValidationWhereInput | boolean
    delete?: ValidationWhereInput | boolean
    connect?: ValidationWhereUniqueInput
    update?: XOR<XOR<ValidationUpdateToOneWithWhereWithoutDocumentsInput, ValidationUpdateWithoutDocumentsInput>, ValidationUncheckedUpdateWithoutDocumentsInput>
  }

  export type CategorieUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<CategorieCreateWithoutDocumentsInput, CategorieUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutDocumentsInput
    upsert?: CategorieUpsertWithoutDocumentsInput
    connect?: CategorieWhereUniqueInput
    update?: XOR<XOR<CategorieUpdateToOneWithWhereWithoutDocumentsInput, CategorieUpdateWithoutDocumentsInput>, CategorieUncheckedUpdateWithoutDocumentsInput>
  }

  export type ConsultationUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput> | ConsultationCreateWithoutDocumentInput[] | ConsultationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDocumentInput | ConsultationCreateOrConnectWithoutDocumentInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutDocumentInput | ConsultationUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: ConsultationCreateManyDocumentInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutDocumentInput | ConsultationUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutDocumentInput | ConsultationUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type TelechargementUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput> | TelechargementCreateWithoutDocumentInput[] | TelechargementUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutDocumentInput | TelechargementCreateOrConnectWithoutDocumentInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutDocumentInput | TelechargementUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: TelechargementCreateManyDocumentInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutDocumentInput | TelechargementUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutDocumentInput | TelechargementUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type ConsultationUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput> | ConsultationCreateWithoutDocumentInput[] | ConsultationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: ConsultationCreateOrConnectWithoutDocumentInput | ConsultationCreateOrConnectWithoutDocumentInput[]
    upsert?: ConsultationUpsertWithWhereUniqueWithoutDocumentInput | ConsultationUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: ConsultationCreateManyDocumentInputEnvelope
    set?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    disconnect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    delete?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    connect?: ConsultationWhereUniqueInput | ConsultationWhereUniqueInput[]
    update?: ConsultationUpdateWithWhereUniqueWithoutDocumentInput | ConsultationUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: ConsultationUpdateManyWithWhereWithoutDocumentInput | ConsultationUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
  }

  export type TelechargementUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput> | TelechargementCreateWithoutDocumentInput[] | TelechargementUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutDocumentInput | TelechargementCreateOrConnectWithoutDocumentInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutDocumentInput | TelechargementUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: TelechargementCreateManyDocumentInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutDocumentInput | TelechargementUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutDocumentInput | TelechargementUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type DocumentCreateNestedManyWithoutCategorieInput = {
    create?: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput> | DocumentCreateWithoutCategorieInput[] | DocumentUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCategorieInput | DocumentCreateOrConnectWithoutCategorieInput[]
    createMany?: DocumentCreateManyCategorieInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCategorieInput = {
    create?: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput> | DocumentCreateWithoutCategorieInput[] | DocumentUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCategorieInput | DocumentCreateOrConnectWithoutCategorieInput[]
    createMany?: DocumentCreateManyCategorieInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput> | DocumentCreateWithoutCategorieInput[] | DocumentUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCategorieInput | DocumentCreateOrConnectWithoutCategorieInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCategorieInput | DocumentUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: DocumentCreateManyCategorieInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCategorieInput | DocumentUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCategorieInput | DocumentUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput> | DocumentCreateWithoutCategorieInput[] | DocumentUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCategorieInput | DocumentCreateOrConnectWithoutCategorieInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCategorieInput | DocumentUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: DocumentCreateManyCategorieInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCategorieInput | DocumentUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCategorieInput | DocumentUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutTelechargementsInput = {
    create?: XOR<UtilisateurCreateWithoutTelechargementsInput, UtilisateurUncheckedCreateWithoutTelechargementsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutTelechargementsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type DocumentCreateNestedOneWithoutTelechargementsInput = {
    create?: XOR<DocumentCreateWithoutTelechargementsInput, DocumentUncheckedCreateWithoutTelechargementsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutTelechargementsInput
    connect?: DocumentWhereUniqueInput
  }

  export type UtilisateurUpdateOneRequiredWithoutTelechargementsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutTelechargementsInput, UtilisateurUncheckedCreateWithoutTelechargementsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutTelechargementsInput
    upsert?: UtilisateurUpsertWithoutTelechargementsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutTelechargementsInput, UtilisateurUpdateWithoutTelechargementsInput>, UtilisateurUncheckedUpdateWithoutTelechargementsInput>
  }

  export type DocumentUpdateOneRequiredWithoutTelechargementsNestedInput = {
    create?: XOR<DocumentCreateWithoutTelechargementsInput, DocumentUncheckedCreateWithoutTelechargementsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutTelechargementsInput
    upsert?: DocumentUpsertWithoutTelechargementsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutTelechargementsInput, DocumentUpdateWithoutTelechargementsInput>, DocumentUncheckedUpdateWithoutTelechargementsInput>
  }

  export type UtilisateurCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<UtilisateurCreateWithoutConsultationsInput, UtilisateurUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConsultationsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type DocumentCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<DocumentCreateWithoutConsultationsInput, DocumentUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutConsultationsInput
    connect?: DocumentWhereUniqueInput
  }

  export type UtilisateurUpdateOneRequiredWithoutConsultationsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutConsultationsInput, UtilisateurUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConsultationsInput
    upsert?: UtilisateurUpsertWithoutConsultationsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutConsultationsInput, UtilisateurUpdateWithoutConsultationsInput>, UtilisateurUncheckedUpdateWithoutConsultationsInput>
  }

  export type DocumentUpdateOneRequiredWithoutConsultationsNestedInput = {
    create?: XOR<DocumentCreateWithoutConsultationsInput, DocumentUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutConsultationsInput
    upsert?: DocumentUpsertWithoutConsultationsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutConsultationsInput, DocumentUpdateWithoutConsultationsInput>, DocumentUncheckedUpdateWithoutConsultationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TransactionsCreateWithoutUtilisateurInput = {
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsCreateOrConnectWithoutUtilisateurInput = {
    where: TransactionsWhereUniqueInput
    create: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput>
  }

  export type TransactionsCreateManyUtilisateurInputEnvelope = {
    data: TransactionsCreateManyUtilisateurInput | TransactionsCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type ValidationCreateWithoutUtilisateurInput = {
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emprunterDoc?: EmprunterDocCreateNestedOneWithoutValidationsInput
    documents?: DocumentCreateNestedManyWithoutValidationInput
  }

  export type ValidationUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    emprunterDocId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutValidationInput
  }

  export type ValidationCreateOrConnectWithoutUtilisateurInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput>
  }

  export type ValidationCreateManyUtilisateurInputEnvelope = {
    data: ValidationCreateManyUtilisateurInput | ValidationCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUtilisateurInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    validation?: ValidationCreateNestedOneWithoutDocumentsInput
    categorie: CategorieCreateNestedOneWithoutDocumentsInput
    consultations?: ConsultationCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutUtilisateurInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput>
  }

  export type DocumentCreateManyUtilisateurInputEnvelope = {
    data: DocumentCreateManyUtilisateurInput | DocumentCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationCreateWithoutUtilisateurInput = {
    dateConsultation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    document: DocumentCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    dateConsultation?: Date | string
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationCreateOrConnectWithoutUtilisateurInput = {
    where: ConsultationWhereUniqueInput
    create: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput>
  }

  export type ConsultationCreateManyUtilisateurInputEnvelope = {
    data: ConsultationCreateManyUtilisateurInput | ConsultationCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type TelechargementCreateWithoutUtilisateurInput = {
    dateTelechargement?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    document: DocumentCreateNestedOneWithoutTelechargementsInput
  }

  export type TelechargementUncheckedCreateWithoutUtilisateurInput = {
    id?: number
    dateTelechargement?: Date | string
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementCreateOrConnectWithoutUtilisateurInput = {
    where: TelechargementWhereUniqueInput
    create: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput>
  }

  export type TelechargementCreateManyUtilisateurInputEnvelope = {
    data: TelechargementCreateManyUtilisateurInput | TelechargementCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type TransactionsUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: TransactionsWhereUniqueInput
    update: XOR<TransactionsUpdateWithoutUtilisateurInput, TransactionsUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<TransactionsCreateWithoutUtilisateurInput, TransactionsUncheckedCreateWithoutUtilisateurInput>
  }

  export type TransactionsUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: TransactionsWhereUniqueInput
    data: XOR<TransactionsUpdateWithoutUtilisateurInput, TransactionsUncheckedUpdateWithoutUtilisateurInput>
  }

  export type TransactionsUpdateManyWithWhereWithoutUtilisateurInput = {
    where: TransactionsScalarWhereInput
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type TransactionsScalarWhereInput = {
    AND?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
    OR?: TransactionsScalarWhereInput[]
    NOT?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
    id?: IntFilter<"Transactions"> | number
    typeOperation?: StringFilter<"Transactions"> | string
    dateTransaction?: DateTimeFilter<"Transactions"> | Date | string
    hashTransaction?: StringFilter<"Transactions"> | string
    coutTransaction?: FloatFilter<"Transactions"> | number
    utilisateurId?: IntFilter<"Transactions"> | number
    createdAt?: DateTimeFilter<"Transactions"> | Date | string
    updatedAt?: DateTimeFilter<"Transactions"> | Date | string
  }

  export type ValidationUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: ValidationWhereUniqueInput
    update: XOR<ValidationUpdateWithoutUtilisateurInput, ValidationUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<ValidationCreateWithoutUtilisateurInput, ValidationUncheckedCreateWithoutUtilisateurInput>
  }

  export type ValidationUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: ValidationWhereUniqueInput
    data: XOR<ValidationUpdateWithoutUtilisateurInput, ValidationUncheckedUpdateWithoutUtilisateurInput>
  }

  export type ValidationUpdateManyWithWhereWithoutUtilisateurInput = {
    where: ValidationScalarWhereInput
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type ValidationScalarWhereInput = {
    AND?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
    OR?: ValidationScalarWhereInput[]
    NOT?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
    id?: IntFilter<"Validation"> | number
    dateValidation?: DateTimeFilter<"Validation"> | Date | string
    hashValidation?: StringFilter<"Validation"> | string
    adresseValidateur?: StringFilter<"Validation"> | string
    sommeDenombreValidation?: StringFilter<"Validation"> | string
    typeValidation?: StringFilter<"Validation"> | string
    utilisateurId?: IntFilter<"Validation"> | number
    emprunterDocId?: IntNullableFilter<"Validation"> | number | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUtilisateurInput, DocumentUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<DocumentCreateWithoutUtilisateurInput, DocumentUncheckedCreateWithoutUtilisateurInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUtilisateurInput, DocumentUncheckedUpdateWithoutUtilisateurInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUtilisateurInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: IntFilter<"Document"> | number
    titre?: StringFilter<"Document"> | string
    auteur?: StringFilter<"Document"> | string
    fichier?: StringFilter<"Document"> | string
    dateDepot?: DateTimeFilter<"Document"> | Date | string
    textMeta?: StringNullableFilter<"Document"> | string | null
    hashDocument?: StringFilter<"Document"> | string
    typeDocumentAccepte?: StringFilter<"Document"> | string
    tailleFichier?: IntFilter<"Document"> | number
    timestampCreation?: DateTimeFilter<"Document"> | Date | string
    utilisateurId?: IntFilter<"Document"> | number
    validationId?: IntNullableFilter<"Document"> | number | null
    categorieId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type ConsultationUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: ConsultationWhereUniqueInput
    update: XOR<ConsultationUpdateWithoutUtilisateurInput, ConsultationUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<ConsultationCreateWithoutUtilisateurInput, ConsultationUncheckedCreateWithoutUtilisateurInput>
  }

  export type ConsultationUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: ConsultationWhereUniqueInput
    data: XOR<ConsultationUpdateWithoutUtilisateurInput, ConsultationUncheckedUpdateWithoutUtilisateurInput>
  }

  export type ConsultationUpdateManyWithWhereWithoutUtilisateurInput = {
    where: ConsultationScalarWhereInput
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type ConsultationScalarWhereInput = {
    AND?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
    OR?: ConsultationScalarWhereInput[]
    NOT?: ConsultationScalarWhereInput | ConsultationScalarWhereInput[]
    id?: IntFilter<"Consultation"> | number
    dateConsultation?: DateTimeFilter<"Consultation"> | Date | string
    utilisateurId?: IntFilter<"Consultation"> | number
    documentId?: IntFilter<"Consultation"> | number
    createdAt?: DateTimeFilter<"Consultation"> | Date | string
    updatedAt?: DateTimeFilter<"Consultation"> | Date | string
  }

  export type TelechargementUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: TelechargementWhereUniqueInput
    update: XOR<TelechargementUpdateWithoutUtilisateurInput, TelechargementUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<TelechargementCreateWithoutUtilisateurInput, TelechargementUncheckedCreateWithoutUtilisateurInput>
  }

  export type TelechargementUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: TelechargementWhereUniqueInput
    data: XOR<TelechargementUpdateWithoutUtilisateurInput, TelechargementUncheckedUpdateWithoutUtilisateurInput>
  }

  export type TelechargementUpdateManyWithWhereWithoutUtilisateurInput = {
    where: TelechargementScalarWhereInput
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type TelechargementScalarWhereInput = {
    AND?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
    OR?: TelechargementScalarWhereInput[]
    NOT?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
    id?: IntFilter<"Telechargement"> | number
    dateTelechargement?: DateTimeFilter<"Telechargement"> | Date | string
    utilisateurId?: IntFilter<"Telechargement"> | number
    documentId?: IntFilter<"Telechargement"> | number
    createdAt?: DateTimeFilter<"Telechargement"> | Date | string
    updatedAt?: DateTimeFilter<"Telechargement"> | Date | string
  }

  export type UtilisateurCreateWithoutTransactionsInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutTransactionsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationUncheckedCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutTransactionsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutTransactionsInput, UtilisateurUncheckedCreateWithoutTransactionsInput>
  }

  export type UtilisateurUpsertWithoutTransactionsInput = {
    update: XOR<UtilisateurUpdateWithoutTransactionsInput, UtilisateurUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UtilisateurCreateWithoutTransactionsInput, UtilisateurUncheckedCreateWithoutTransactionsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutTransactionsInput, UtilisateurUncheckedUpdateWithoutTransactionsInput>
  }

  export type UtilisateurUpdateWithoutTransactionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateWithoutValidationsInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutValidationsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutValidationsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutValidationsInput, UtilisateurUncheckedCreateWithoutValidationsInput>
  }

  export type EmprunterDocCreateWithoutValidationsInput = {
    dateEmprunt?: Date | string
    dateRetour?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmprunterDocUncheckedCreateWithoutValidationsInput = {
    id?: number
    dateEmprunt?: Date | string
    dateRetour?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmprunterDocCreateOrConnectWithoutValidationsInput = {
    where: EmprunterDocWhereUniqueInput
    create: XOR<EmprunterDocCreateWithoutValidationsInput, EmprunterDocUncheckedCreateWithoutValidationsInput>
  }

  export type DocumentCreateWithoutValidationInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutDocumentsInput
    categorie: CategorieCreateNestedOneWithoutDocumentsInput
    consultations?: ConsultationCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutValidationInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutValidationInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput>
  }

  export type DocumentCreateManyValidationInputEnvelope = {
    data: DocumentCreateManyValidationInput | DocumentCreateManyValidationInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutValidationsInput = {
    update: XOR<UtilisateurUpdateWithoutValidationsInput, UtilisateurUncheckedUpdateWithoutValidationsInput>
    create: XOR<UtilisateurCreateWithoutValidationsInput, UtilisateurUncheckedCreateWithoutValidationsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutValidationsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutValidationsInput, UtilisateurUncheckedUpdateWithoutValidationsInput>
  }

  export type UtilisateurUpdateWithoutValidationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutValidationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type EmprunterDocUpsertWithoutValidationsInput = {
    update: XOR<EmprunterDocUpdateWithoutValidationsInput, EmprunterDocUncheckedUpdateWithoutValidationsInput>
    create: XOR<EmprunterDocCreateWithoutValidationsInput, EmprunterDocUncheckedCreateWithoutValidationsInput>
    where?: EmprunterDocWhereInput
  }

  export type EmprunterDocUpdateToOneWithWhereWithoutValidationsInput = {
    where?: EmprunterDocWhereInput
    data: XOR<EmprunterDocUpdateWithoutValidationsInput, EmprunterDocUncheckedUpdateWithoutValidationsInput>
  }

  export type EmprunterDocUpdateWithoutValidationsInput = {
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmprunterDocUncheckedUpdateWithoutValidationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateEmprunt?: DateTimeFieldUpdateOperationsInput | Date | string
    dateRetour?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutValidationInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutValidationInput, DocumentUncheckedUpdateWithoutValidationInput>
    create: XOR<DocumentCreateWithoutValidationInput, DocumentUncheckedCreateWithoutValidationInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutValidationInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutValidationInput, DocumentUncheckedUpdateWithoutValidationInput>
  }

  export type DocumentUpdateManyWithWhereWithoutValidationInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutValidationInput>
  }

  export type ValidationCreateWithoutEmprunterDocInput = {
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutValidationsInput
    documents?: DocumentCreateNestedManyWithoutValidationInput
  }

  export type ValidationUncheckedCreateWithoutEmprunterDocInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutValidationInput
  }

  export type ValidationCreateOrConnectWithoutEmprunterDocInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput>
  }

  export type ValidationCreateManyEmprunterDocInputEnvelope = {
    data: ValidationCreateManyEmprunterDocInput | ValidationCreateManyEmprunterDocInput[]
    skipDuplicates?: boolean
  }

  export type ValidationUpsertWithWhereUniqueWithoutEmprunterDocInput = {
    where: ValidationWhereUniqueInput
    update: XOR<ValidationUpdateWithoutEmprunterDocInput, ValidationUncheckedUpdateWithoutEmprunterDocInput>
    create: XOR<ValidationCreateWithoutEmprunterDocInput, ValidationUncheckedCreateWithoutEmprunterDocInput>
  }

  export type ValidationUpdateWithWhereUniqueWithoutEmprunterDocInput = {
    where: ValidationWhereUniqueInput
    data: XOR<ValidationUpdateWithoutEmprunterDocInput, ValidationUncheckedUpdateWithoutEmprunterDocInput>
  }

  export type ValidationUpdateManyWithWhereWithoutEmprunterDocInput = {
    where: ValidationScalarWhereInput
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyWithoutEmprunterDocInput>
  }

  export type UtilisateurCreateWithoutDocumentsInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutDocumentsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutDocumentsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutDocumentsInput, UtilisateurUncheckedCreateWithoutDocumentsInput>
  }

  export type ValidationCreateWithoutDocumentsInput = {
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutValidationsInput
    emprunterDoc?: EmprunterDocCreateNestedOneWithoutValidationsInput
  }

  export type ValidationUncheckedCreateWithoutDocumentsInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    emprunterDocId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationCreateOrConnectWithoutDocumentsInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutDocumentsInput, ValidationUncheckedCreateWithoutDocumentsInput>
  }

  export type CategorieCreateWithoutDocumentsInput = {
    libelle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategorieUncheckedCreateWithoutDocumentsInput = {
    id?: number
    libelle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategorieCreateOrConnectWithoutDocumentsInput = {
    where: CategorieWhereUniqueInput
    create: XOR<CategorieCreateWithoutDocumentsInput, CategorieUncheckedCreateWithoutDocumentsInput>
  }

  export type ConsultationCreateWithoutDocumentInput = {
    dateConsultation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationUncheckedCreateWithoutDocumentInput = {
    id?: number
    dateConsultation?: Date | string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationCreateOrConnectWithoutDocumentInput = {
    where: ConsultationWhereUniqueInput
    create: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput>
  }

  export type ConsultationCreateManyDocumentInputEnvelope = {
    data: ConsultationCreateManyDocumentInput | ConsultationCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type TelechargementCreateWithoutDocumentInput = {
    dateTelechargement?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutTelechargementsInput
  }

  export type TelechargementUncheckedCreateWithoutDocumentInput = {
    id?: number
    dateTelechargement?: Date | string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementCreateOrConnectWithoutDocumentInput = {
    where: TelechargementWhereUniqueInput
    create: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput>
  }

  export type TelechargementCreateManyDocumentInputEnvelope = {
    data: TelechargementCreateManyDocumentInput | TelechargementCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutDocumentsInput = {
    update: XOR<UtilisateurUpdateWithoutDocumentsInput, UtilisateurUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UtilisateurCreateWithoutDocumentsInput, UtilisateurUncheckedCreateWithoutDocumentsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutDocumentsInput, UtilisateurUncheckedUpdateWithoutDocumentsInput>
  }

  export type UtilisateurUpdateWithoutDocumentsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type ValidationUpsertWithoutDocumentsInput = {
    update: XOR<ValidationUpdateWithoutDocumentsInput, ValidationUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ValidationCreateWithoutDocumentsInput, ValidationUncheckedCreateWithoutDocumentsInput>
    where?: ValidationWhereInput
  }

  export type ValidationUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ValidationWhereInput
    data: XOR<ValidationUpdateWithoutDocumentsInput, ValidationUncheckedUpdateWithoutDocumentsInput>
  }

  export type ValidationUpdateWithoutDocumentsInput = {
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutValidationsNestedInput
    emprunterDoc?: EmprunterDocUpdateOneWithoutValidationsNestedInput
  }

  export type ValidationUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    emprunterDocId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategorieUpsertWithoutDocumentsInput = {
    update: XOR<CategorieUpdateWithoutDocumentsInput, CategorieUncheckedUpdateWithoutDocumentsInput>
    create: XOR<CategorieCreateWithoutDocumentsInput, CategorieUncheckedCreateWithoutDocumentsInput>
    where?: CategorieWhereInput
  }

  export type CategorieUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: CategorieWhereInput
    data: XOR<CategorieUpdateWithoutDocumentsInput, CategorieUncheckedUpdateWithoutDocumentsInput>
  }

  export type CategorieUpdateWithoutDocumentsInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategorieUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationUpsertWithWhereUniqueWithoutDocumentInput = {
    where: ConsultationWhereUniqueInput
    update: XOR<ConsultationUpdateWithoutDocumentInput, ConsultationUncheckedUpdateWithoutDocumentInput>
    create: XOR<ConsultationCreateWithoutDocumentInput, ConsultationUncheckedCreateWithoutDocumentInput>
  }

  export type ConsultationUpdateWithWhereUniqueWithoutDocumentInput = {
    where: ConsultationWhereUniqueInput
    data: XOR<ConsultationUpdateWithoutDocumentInput, ConsultationUncheckedUpdateWithoutDocumentInput>
  }

  export type ConsultationUpdateManyWithWhereWithoutDocumentInput = {
    where: ConsultationScalarWhereInput
    data: XOR<ConsultationUpdateManyMutationInput, ConsultationUncheckedUpdateManyWithoutDocumentInput>
  }

  export type TelechargementUpsertWithWhereUniqueWithoutDocumentInput = {
    where: TelechargementWhereUniqueInput
    update: XOR<TelechargementUpdateWithoutDocumentInput, TelechargementUncheckedUpdateWithoutDocumentInput>
    create: XOR<TelechargementCreateWithoutDocumentInput, TelechargementUncheckedCreateWithoutDocumentInput>
  }

  export type TelechargementUpdateWithWhereUniqueWithoutDocumentInput = {
    where: TelechargementWhereUniqueInput
    data: XOR<TelechargementUpdateWithoutDocumentInput, TelechargementUncheckedUpdateWithoutDocumentInput>
  }

  export type TelechargementUpdateManyWithWhereWithoutDocumentInput = {
    where: TelechargementScalarWhereInput
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentCreateWithoutCategorieInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutDocumentsInput
    validation?: ValidationCreateNestedOneWithoutDocumentsInput
    consultations?: ConsultationCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutCategorieInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDocumentInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutCategorieInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput>
  }

  export type DocumentCreateManyCategorieInputEnvelope = {
    data: DocumentCreateManyCategorieInput | DocumentCreateManyCategorieInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutCategorieInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCategorieInput, DocumentUncheckedUpdateWithoutCategorieInput>
    create: XOR<DocumentCreateWithoutCategorieInput, DocumentUncheckedCreateWithoutCategorieInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCategorieInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCategorieInput, DocumentUncheckedUpdateWithoutCategorieInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCategorieInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCategorieInput>
  }

  export type UtilisateurCreateWithoutTelechargementsInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutTelechargementsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUtilisateurInput
    consultations?: ConsultationUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutTelechargementsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutTelechargementsInput, UtilisateurUncheckedCreateWithoutTelechargementsInput>
  }

  export type DocumentCreateWithoutTelechargementsInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutDocumentsInput
    validation?: ValidationCreateNestedOneWithoutDocumentsInput
    categorie: CategorieCreateNestedOneWithoutDocumentsInput
    consultations?: ConsultationCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutTelechargementsInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    consultations?: ConsultationUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutTelechargementsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutTelechargementsInput, DocumentUncheckedCreateWithoutTelechargementsInput>
  }

  export type UtilisateurUpsertWithoutTelechargementsInput = {
    update: XOR<UtilisateurUpdateWithoutTelechargementsInput, UtilisateurUncheckedUpdateWithoutTelechargementsInput>
    create: XOR<UtilisateurCreateWithoutTelechargementsInput, UtilisateurUncheckedCreateWithoutTelechargementsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutTelechargementsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutTelechargementsInput, UtilisateurUncheckedUpdateWithoutTelechargementsInput>
  }

  export type UtilisateurUpdateWithoutTelechargementsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutTelechargementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput
    consultations?: ConsultationUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type DocumentUpsertWithoutTelechargementsInput = {
    update: XOR<DocumentUpdateWithoutTelechargementsInput, DocumentUncheckedUpdateWithoutTelechargementsInput>
    create: XOR<DocumentCreateWithoutTelechargementsInput, DocumentUncheckedCreateWithoutTelechargementsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutTelechargementsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutTelechargementsInput, DocumentUncheckedUpdateWithoutTelechargementsInput>
  }

  export type DocumentUpdateWithoutTelechargementsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput
    validation?: ValidationUpdateOneWithoutDocumentsNestedInput
    categorie?: CategorieUpdateOneRequiredWithoutDocumentsNestedInput
    consultations?: ConsultationUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutTelechargementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UtilisateurCreateWithoutConsultationsInput = {
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutConsultationsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    motDePasse: string
    role: $Enums.Role
    reputationScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionsUncheckedCreateNestedManyWithoutUtilisateurInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUtilisateurInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUtilisateurInput
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutConsultationsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutConsultationsInput, UtilisateurUncheckedCreateWithoutConsultationsInput>
  }

  export type DocumentCreateWithoutConsultationsInput = {
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    utilisateur: UtilisateurCreateNestedOneWithoutDocumentsInput
    validation?: ValidationCreateNestedOneWithoutDocumentsInput
    categorie: CategorieCreateNestedOneWithoutDocumentsInput
    telechargements?: TelechargementCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutConsultationsInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    telechargements?: TelechargementUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutConsultationsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutConsultationsInput, DocumentUncheckedCreateWithoutConsultationsInput>
  }

  export type UtilisateurUpsertWithoutConsultationsInput = {
    update: XOR<UtilisateurUpdateWithoutConsultationsInput, UtilisateurUncheckedUpdateWithoutConsultationsInput>
    create: XOR<UtilisateurCreateWithoutConsultationsInput, UtilisateurUncheckedCreateWithoutConsultationsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutConsultationsInput, UtilisateurUncheckedUpdateWithoutConsultationsInput>
  }

  export type UtilisateurUpdateWithoutConsultationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    reputationScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionsUncheckedUpdateManyWithoutUtilisateurNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUtilisateurNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUtilisateurNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type DocumentUpsertWithoutConsultationsInput = {
    update: XOR<DocumentUpdateWithoutConsultationsInput, DocumentUncheckedUpdateWithoutConsultationsInput>
    create: XOR<DocumentCreateWithoutConsultationsInput, DocumentUncheckedCreateWithoutConsultationsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutConsultationsInput, DocumentUncheckedUpdateWithoutConsultationsInput>
  }

  export type DocumentUpdateWithoutConsultationsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput
    validation?: ValidationUpdateOneWithoutDocumentsNestedInput
    categorie?: CategorieUpdateOneRequiredWithoutDocumentsNestedInput
    telechargements?: TelechargementUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telechargements?: TelechargementUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type TransactionsCreateManyUtilisateurInput = {
    id?: number
    typeOperation: string
    dateTransaction?: Date | string
    hashTransaction: string
    coutTransaction: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationCreateManyUtilisateurInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    emprunterDocId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyUtilisateurInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    validationId?: number | null
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationCreateManyUtilisateurInput = {
    id?: number
    dateConsultation?: Date | string
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementCreateManyUtilisateurInput = {
    id?: number
    dateTelechargement?: Date | string
    documentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsUpdateWithoutUtilisateurInput = {
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeOperation?: StringFieldUpdateOperationsInput | string
    dateTransaction?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTransaction?: StringFieldUpdateOperationsInput | string
    coutTransaction?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationUpdateWithoutUtilisateurInput = {
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emprunterDoc?: EmprunterDocUpdateOneWithoutValidationsNestedInput
    documents?: DocumentUpdateManyWithoutValidationNestedInput
  }

  export type ValidationUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    emprunterDocId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutValidationNestedInput
  }

  export type ValidationUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    emprunterDocId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutUtilisateurInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validation?: ValidationUpdateOneWithoutDocumentsNestedInput
    categorie?: CategorieUpdateOneRequiredWithoutDocumentsNestedInput
    consultations?: ConsultationUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationUpdateWithoutUtilisateurInput = {
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementUpdateWithoutUtilisateurInput = {
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutTelechargementsNestedInput
  }

  export type TelechargementUncheckedUpdateWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementUncheckedUpdateManyWithoutUtilisateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyValidationInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    categorieId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutValidationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput
    categorie?: CategorieUpdateOneRequiredWithoutDocumentsNestedInput
    consultations?: ConsultationUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutValidationInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutValidationInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationCreateManyEmprunterDocInput = {
    id?: number
    dateValidation?: Date | string
    hashValidation: string
    adresseValidateur: string
    sommeDenombreValidation: string
    typeValidation: string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationUpdateWithoutEmprunterDocInput = {
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutValidationsNestedInput
    documents?: DocumentUpdateManyWithoutValidationNestedInput
  }

  export type ValidationUncheckedUpdateWithoutEmprunterDocInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutValidationNestedInput
  }

  export type ValidationUncheckedUpdateManyWithoutEmprunterDocInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateValidation?: DateTimeFieldUpdateOperationsInput | Date | string
    hashValidation?: StringFieldUpdateOperationsInput | string
    adresseValidateur?: StringFieldUpdateOperationsInput | string
    sommeDenombreValidation?: StringFieldUpdateOperationsInput | string
    typeValidation?: StringFieldUpdateOperationsInput | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationCreateManyDocumentInput = {
    id?: number
    dateConsultation?: Date | string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelechargementCreateManyDocumentInput = {
    id?: number
    dateTelechargement?: Date | string
    utilisateurId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationUpdateWithoutDocumentInput = {
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutConsultationsNestedInput
  }

  export type ConsultationUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateConsultation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementUpdateWithoutDocumentInput = {
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutTelechargementsNestedInput
  }

  export type TelechargementUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTelechargement?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyCategorieInput = {
    id?: number
    titre: string
    auteur: string
    fichier: string
    dateDepot?: Date | string
    textMeta?: string | null
    hashDocument: string
    typeDocumentAccepte: string
    tailleFichier: number
    timestampCreation?: Date | string
    utilisateurId: number
    validationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutCategorieInput = {
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutDocumentsNestedInput
    validation?: ValidationUpdateOneWithoutDocumentsNestedInput
    consultations?: ConsultationUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultations?: ConsultationUncheckedUpdateManyWithoutDocumentNestedInput
    telechargements?: TelechargementUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    fichier?: StringFieldUpdateOperationsInput | string
    dateDepot?: DateTimeFieldUpdateOperationsInput | Date | string
    textMeta?: NullableStringFieldUpdateOperationsInput | string | null
    hashDocument?: StringFieldUpdateOperationsInput | string
    typeDocumentAccepte?: StringFieldUpdateOperationsInput | string
    tailleFichier?: IntFieldUpdateOperationsInput | number
    timestampCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateurId?: IntFieldUpdateOperationsInput | number
    validationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilisateurCountOutputTypeDefaultArgs instead
     */
    export type UtilisateurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationCountOutputTypeDefaultArgs instead
     */
    export type ValidationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmprunterDocCountOutputTypeDefaultArgs instead
     */
    export type EmprunterDocCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmprunterDocCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentCountOutputTypeDefaultArgs instead
     */
    export type DocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategorieCountOutputTypeDefaultArgs instead
     */
    export type CategorieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionsDefaultArgs instead
     */
    export type TransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationDefaultArgs instead
     */
    export type ValidationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmprunterDocDefaultArgs instead
     */
    export type EmprunterDocArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmprunterDocDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategorieDefaultArgs instead
     */
    export type CategorieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TelechargementDefaultArgs instead
     */
    export type TelechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TelechargementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationDefaultArgs instead
     */
    export type ConsultationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsultationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}